/ start:

callcc = (ret, cont) {
  cont((res) { return(ret, res) })
};

or = (!cont1, cont2) {
  callcc((ret) {
    cont1(() { ! cont1 }, () { ! cont2 })
  });
};
and = (!cont1, cont2) {
  callcc((ret) {
    cont1(() { ! cont2 }, () { ! (a, b) { b() } })
  });
};

if = (ret, v, cont) {
  break = () { return(ret, 0) };
  v(() { cont(break) }, break)
};
if_else = (ret, v, cont1, cont2) {
  break = () { return(ret, 0) };
  v(() { cont1(break) }, () { cont2(break) })
};
if_ret = (ret, v, cont) {
  break = () { return(ret, 0) };
  v(() {
    cont();
    break()
  },
  break)
};

if_else_ret = (!v, cont1, cont2) {
  callcc((ret) {
    v(() {
      res = cont1();
      ! res
    }, () {
      res = cont2();
      ! res
    })
  });
};

ne = (!a, b) {
  callcc((ret) {
  compare(a, b, () { ! (x y) { y() } }, () { ! (x y) { x() } })
  });
};
not = (!x) {
  callcc((ret) {
    x(() { ! (a b) { b() } }, () { ! (a b) { a() } })
  });
};

eq = (!a, b) {
  callcc((ret) {
  compare(a, b, () { ! (x y) { x() } }, () { ! (x y) { y() } })
  });
};

make_nil = (!) { ! (cont_nil, cont_leaf, cont_internal) { cont_nil() } };
make_leaf = (!l, r) { ! (cont_nil, cont_leaf, cont_internal) { cont_leaf(l, r) } };
make_internal = (!a, b) { ! (cont_nil, cont_leaf, cont_internal) { cont_internal(a, b) } };

tree_is_leaf = (!tree) {
  callcc((ret) {
    tree(
      () { ! (a, b) { b() } },
      (l, r) { ! (a, b) { a() } },
      (a, b) { ! (a, b) { b() } }
    )
  });
};

tree_leaf_get_l = (!tree) {
  callcc((ret) {
    tree(
      () { ! 0 },
      (l, r) { ! l },
      (a, b) { ! 0 }
    )
  });
};

tree_leaf_get_r = (!tree) {
  callcc((ret) {
    tree(
      () { ! 0 },
      (l, r) { ! r },
      (a, b) { ! 0 }
    )
  });
};

is_nil = (!tree) {
  ! (a, b) {
    tree(
      () { a() },
      (l, r) { b() },
      (a, c) { b() }
    )
  }
};

str_equal_func = (!a, b, l, r) {
  res = str_cmp_func(a, b, l, r);
  ! eq(0, res)
};
  
print_range = (!a b) {
  if(eq(a, b), (break) { ! 0 });
  print_char(deref_byte(a));
  print_range(add(a, 1), b);
};

print_num = (!v) {
  if(eq(v, 0), (break) { ! 0 });
  print_num(div(v, 10));
  print_char(add(deref_byte("0"), mod(v, 10)));
};

printf = (!l) {
  lb = deref_byte(l);
  if (eq(lb, 0), (break) {
    ! 0
  });
  if (eq(lb, 123), (break) {
    ! (!a, b) {
      print_range(a, b);
      printf(add(l, 2))
    }
  })
  print_char(lb);
  ! printf(add(l, 1))
};

tree_size = (!tree) {
  callcc((ret) {
  tree(
    () { ! 0 },
    (l, r) { ! 1 },
    (a, b) {
      a = tree_size(a);
      b = tree_size(b);
      ! add(a, b)
    }
  )
  });
};

map_tree = (!tree action) {
  callcc((ret) {
  tree(
    () { ! make_nil() },
    (l, r) {
      ! action(l, r)
    },
    (a, b) {
      a = map_tree(a, action);
      b = map_tree(b, action);
      ! make_internal(a, b)
    }
  )
  });
};

first_leaf = (!tree) {
  callcc((ret) { tree(
    () { ! make_nil() },
    (l, r) { ! make_leaf(l, r) },
    (a, b) {
      a_leaf = first_leaf(a);
      b_leaf = first_leaf(b);
      a_leaf(
        () { ! b_leaf },
        (l, r) { ! a_leaf },
        (a, b) { ! b_leaf }
      )
    }
  )
  });
};

map_tree_iota_help = (!n tree action) {
  callcc((ret) {
  tree(
    () { ! n, make_nil() },
    (l, r) { ! add(n, 1), action(n, l, r) },
    (a, b) {
      n, new_a = map_tree_iota_help(n, a, action);
      n, new_b = map_tree_iota_help(n, b, action);
      res = make_internal(new_a, new_b);
      ! n, res
    }
  )
  });
};

map_tree_iota = (!tree action) {
  n, t = map_tree_iota_help(0, tree, action);
  ! t
};

reverse_tree = (!tree) {
  callcc((ret) { tree(
    () { ! make_nil() },
    (l, r) { ! make_leaf(l, r) },
    (a, b) {
      ! make_internal(reverse_tree(b), reverse_tree(a))
    }
  ) });
};

search_tree = (!tree l r) {
  callcc(
    (ret) {
      tree(
        () { ! (a, b) { b() } },
        (a, b) {
          res = str_equal_func(l, r, a, b);
          ! res
        },
        (a, b) {
          search_a = search_tree(a, l, r);
          if(search_a, (break) { ! search_a });
          search_b = search_tree(b, l, r);
          ! search_b
        }
      )
    }
  )
};

is_alpha_bool = (!dig) {
  ! eq(is_alpha(dig), 1)
};

is_digit_bool = (!dig) {
  ! eq(is_digit(dig), 1)
};

read_whitespace = (! l r) {
  lb = deref_byte(l);
  if(eq(l, r), (break) { ! l, r });
  if(or(eq(lb, 10), eq(lb, 32)), (break) {
    l, r = read_whitespace(add(l, 1), r);
    ! l, r
  });
  ! l, r
};

read_id_helper = (!l, r) {
  if (eq(l, r), (break) { ! l });
  lb = deref_byte(l);
  if (or(eq(lb, deref_byte("_")), or(is_digit_bool(lb), is_alpha_bool(lb))), (break) {
    ! read_id_helper(add(l, 1), r)
  });
  ! l
};

read_identifier = (!l, r) {
  mid = read_id_helper(l, r);
  ! mid, r, l, mid
};

matches = (!a b) {
  if(eq(deref_byte(a), 0), (break) { ! (a b) { a() } });
  if(ne(deref_byte(a), deref_byte(b)), (break) { ! (a b) { b() } });
  ! matches(add(a, 1), add(b, 1))
};

matches_strict = (!pattern, l, r) {
  if (eq(deref_byte(pattern), 0), (break) { ! eq(l, r) });
  if (ne(deref_byte(pattern), deref_byte(l)), (break) { ! (a, b) { b() } });
  ! matches_strict(add(pattern, 1), add(l, 1), r)
};
token_matches = (!pattern, token) {
  t, l, r = token();
  ! matches_strict(pattern, l, r)
};

read_const_string = (!tokenizer) {
  orig_l, r = tokenizer();
  l r = read_whitespace(orig_l, r);
  lb = deref_byte(l);
  if(ne(lb, 34), (break) { ! tokenizer, 0 });
  l_start = add(l, 1);
  l_end r = read_until(34, l_start, r);
  l = add(l_end, 1);
  ! make_tokenizer(l, r), (!) { ! l_start, l_end }
};
token_id = 1;
token_string = 3;
/ 0 -> special, 1 -> id, 2 -> number, 3 -> string, 4 -> comment, 5 -> newline, 6 -> eof
/ returns l r type il ir
token_eof = 6;
read_token = (!l r) {
  l r = read_whitespace(l, r);
  if (eq(l, r), (break) { ! l, l, token_eof, l, l });
  if(eq(34, deref_byte(l)), (break) {
    l_start = add(l, 1);
    l_end r = read_until(34, l_start, r);
    ! l, r, token_string, l, add(l, 1)
  });
  if(matches("!", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches("(", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches(")", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches("{", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches("}", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches("=", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches(";", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches(":", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches(",", l), (break) { ! add(l, 1), r, 0, l, add(l, 1) });
  if(matches("/", l), (break) { 
    m, r = read_until(deref_byte("\n"), l, r);
    l, r, token_id, il, ir = read_token(m, r);
    ! l, r, token_id, il, ir
  });
  l r il ir = read_identifier(l, r);
  if(ne(il, ir), (break) { ! l, r, token_id, il, ir });
  error(l)
};

read_token_t = (! tokenizer) {
  l, r = tokenizer();
  l, r, t, tl, tr = read_token(l, r);
  ! make_tokenizer(l, r), (!) { ! t, tl, tr }
};

make_tokenizer = (!l, r) {
  ! (!) { ! l, r }
};

token_type = (!token) {
  t, tl, tr = token();
  ! t
};

parse_is_returning = (!orig_tokenizer) {
  tokenizer, token = read_token_t(orig_tokenizer);
  if(token_matches("!", token), (break) {
    ! tokenizer, (a, b) { a() }
  });
  ! orig_tokenizer, (a, b) { b() }
};

parse_id_list = (!old_tokenizer) {
  tokenizer, token = read_token_t(old_tokenizer);
  if (eq(token_type(token), 1), (break) {
    t, tl, tr = token();
    tokenizer, tree = parse_id_list(tokenizer);
    ! tokenizer, make_internal(make_leaf(tl, tr), tree)
  });
  if (token_matches(",", token), (break) {
    tokenizer, tree = parse_id_list(tokenizer);
    ! tokenizer, tree
  });
  ! old_tokenizer, make_nil()
};

print_function = (!old_context, gl, gr, func) {
  fname_l, fname_r, func_args, is_returning, cexp = func();
  new_context = merge_context(old_context, func_args);
  cids = get_cexp_vars(cexp);
  cids = filter_context(cids, new_context);
  gl, gr, cids = if_else_ret(is_returning, (!) {
    gl, gr = gen_label();
    cids = make_internal(cids, make_leaf(gl, gr));
    ! (!) { ! gl, gr, cids }
  },
  (!) { ! (!) { ! gl, gr, cids } })();
  printf("jmp {}_end\n")(fname_l, fname_r);
  map_tree(make_internal(new_context, cids), (!l r) { printf("{}{}: dq 0\n")(fname_l, fname_r)(l, r); });
  printf("{}:\n")(fname_l, fname_r);
  if_ret(is_returning, (!) {
    printf("pop rax\n");
  });
  map_tree(new_context, (!l r) { printf("pop qword [{}{}]\n")(fname_l, fname_r)(l, r); });
  new_context = if_else_ret(is_returning, (!) {
    printf("push rax\n");
    printf("mov [{}{}], rsp\n")(fname_l, fname_r)(gl, gr);
    ! make_internal(new_context, make_leaf(gl, gr))
  },
  (!) {
    ! new_context
  });
  print_cexp(fname_l, fname_r, new_context, is_returning, gl, gr, cexp);
  if_ret(is_returning, (!) { printf("ret\n"); });
  printf("{}_end:\n")(fname_l, fname_r);
  ! 0
};

get_aexp_from_texp = (! texp) {
  if(eq(texp, 0), (break) { ! 0 });
  texp_type, texp = texp();
  if(eq(texp_type, texp_aexp), (break) {
    ! texp
  });
  ! 0
};

get_aexp_from_expr = (!expr) {
  if(eq(expr, 0), (break) { ! 0 });
  if(eq(expr_get_type(expr), expr_texp), (break) {
    ! get_aexp_from_texp(expr_texp_get_texp(expr))
  });
  ! 0
};

texp_string = 0;
texp_func = 1;
texp_aexp = 2;
/ returns l r texp
parse_texp = (!orig_tokenizer) {
  l r = orig_tokenizer();
  tokenizer, tk = read_token_t(orig_tokenizer);
  t, tl, tr = tk();
  if(eq(t, token_id), (break) { ! tokenizer, (!) { ! texp_aexp, (!) { ! tl, tr } } });
  tokenizer, func = parse_function(orig_tokenizer);
  if(ne(func, 0), (break) {
    ! tokenizer, (!) { ! texp_func, (!) { ! func } }
  });
  tokenizer, string = read_const_string(tokenizer);
  if(ne(string, 0), (break) {
    ! tokenizer, (!) { ! texp_string, (!) { ! string } }
  });
  ! orig_tokenizer, 0
};

print_texp = (!fl, fr, old_context, ids, gl, gr, texp) {
  if(eq(texp, 0), (break) { ! 0 });
  texp_type, texp = texp();
  if (eq(texp_type, texp_string), (break) {
    string = texp();
    print_const_string(string);
    map_tree(ids, (!l r) { ! printf("pop qword [{}{}]\n")(fl, fr)(l, r) });
    ! 0
  });
  if (eq(texp_type, texp_func), (break) {
    func = texp();
    fname_l fname_r func_args is_returning cexp = func();
    old_context = filter_context(old_context, func_args);
    print_function(old_context, gl, gr, func);
    context = make_internal(make_leaf(fname_l, fname_r), old_context);
    printf("mov rdi, ");
    size = tree_size(context);
    print_num(mul(8, add(1, size)));
    printf("\ncall malloc\n");

    map_tree_iota(context, (!n l r) {
      if_else_ret(eq(l, fname_l), (!) {
        printf("mov qword [rax+");
        print_num(mul(8, add(1, n)));
        printf("], {}\n")(l, r);
      }, (!) {
        printf("mov rcx, [{}{}]\nmov qword [rax+")(fl, fr)(l, r);
        print_num(mul(8, add(1, n)));
        printf("], rcx\n");
      });
    });
    printf("mov qword [rax], ");
    print_num(size);
    printf("\npush rax\n");
    map_tree(ids, (!l r) { printf("pop qword [{}{}]\n")(fl, fr)(l, r); });
    ! 0
  });
  if (eq(texp_type, texp_aexp), (break) {
    a, b = texp();
    print_aexp(old_context, fl, fr, a, b);
    map_tree(ids, (!l r) { ! printf("pop qword [{}{}]\n")(fl, fr)(l, r) });
    ! 0
  });
  ! 0
};

texp_to_function = (!texp) {
  texp_type, texp = texp();
  if(eq(texp_type, texp_func), (break) {
    ! texp()
  });
  ! 0
};

read_until = (!c l r) {
  lb = deref_byte(l);
  if(eq(lb, c), (break) { ! l, r });
  l, r = read_until(c, add(l, 1), r);
  ! l, r
};

print_const_string = (!str) {
  l_start l_end = str();
  il ir = gen_label();
  printf("jmp {}_end\n{}: db ")(il, ir)(il, ir);
  print_char(96);
  printf("{}")(l_start, l_end);
  print_char(96);
  printf("\ndb 0\n{}_end: push {}\n")(il, ir)(il, ir);
  ! 0
};

/ lock in
print_aexp = (!comb_args fname_l fname_r l r) {
  dig = deref_byte(l);
  res = is_alpha(dig);
  if(eq(res, 1), (break_o) {
    bool = search_tree(comb_args, l, r);
    if(bool, (break) {
      printf("push qword [{}{}]\n")(fname_l, fname_r)(l, r);
      ! 0
    });
    break_o()
  });
  if(eq(is_digit(dig), 1), (break) {
    printf("push {}\n")(l, r);
    ! 0
  });
  printf("push qword [{}]\n")(l, r);
  ! 0
};

filter_context = (!old_context ids) {
  context = map_tree(old_context, (!l r) {
    if(search_tree(ids, l, r), (break) { ! make_nil() });
    ! make_leaf(l, r)
  });
  ! context
};

merge_context = (!old_context ids) {
  context = filter_context(old_context, ids);
  ! make_internal(context, ids)
};

print_cexp = (!fl fr context is_returning, gl, gr, cexp) {
  assign cexp = cexp();
  print_statement(fl, fr, context, is_returning, gl, gr, assign);
  if(eq(cexp, 0), (break) { ! 0 });
  assign_vars = get_assignment_vars(assign);
  print_cexp(fl, fr, merge_context(context, assign_vars), is_returning, gl, gr, cexp);
  ! 0
};

get_cexp_vars = (!cexp) {
  assign cexp = cexp();
  ids = get_assignment_vars(assign);
  if(eq(cexp, 0), (break) { ! ids });
  ids2 = get_cexp_vars(cexp);
  ids2 = filter_context(ids2, ids);
  ! make_internal(ids, ids2)
};

parse_assign_left = (!orig_tokenizer) {
  tokenizer, ids = parse_id_list(orig_tokenizer);
  tokenizer, mt = eat_token(tokenizer, "=");
  if(not(mt), (break) {
    il ir = gen_label();
    ! orig_tokenizer, make_leaf(il, ir)
  });
  ! tokenizer, ids
};

eat_token = (!tokenizer, targ) {
  new_tokenizer, token = read_token_t(tokenizer);
  if (token_matches(targ, token), (break) {
    ! new_tokenizer, (a, b) { a() }
  })
  ! tokenizer, (a, b) { b() }
};

get_assignment_vars = (!assign) {
  assign_type, assign = assign();
  if (eq(assign_type, stmt_assign), (break) {
    ids, call_exp = assign();
    ! ids
  });
  ! make_nil()
};

print_call_exp_args = (!fl, fr, old_context, gl, gr, op_list) {
  map_tree(reverse_tree(op_list), (!call_exp r) {
    il, ir = gen_label();
    printf("jmp {}_end\n{}{}: dq 0\n{}_end:\n")(il, ir)(fl, fr)(il, ir)(il, ir);
    print_expr(fl, fr, old_context, make_leaf(il, ir), gl, gr, call_exp);
    printf("push qword [{}{}]\n")(fl, fr)(il, ir);
  });
  ! 0
};

/ library
cons = (!head, tail) {
  ! (!) { ! head, tail }
};
head = (!list) {
  head, tail = list();
  ! head
};
tail = (!list) {
  head, tail = list();
  ! tail
};
String = (!l, r) {
  ! (!) { ! l, r }
};

assign_new = (!ids, call_exp) {
  ! (!) { ! ids, call_exp }
};

/ data structs
stmt_tail_rec = 2;
stmt_assign = 3;
stmt_type_get = (!stmt) {
  stmt_type, stmt = stmt();
  ! stmt_type
};
stmt_return_id = 1;
stmt_return = (!call_exps) {
  ! (!) { ! stmt_return_id, call_exps }
};
stmt_return_get = (!stmt) {
  stmt_type, call_exps = stmt();
  ! call_exps
};
stmt_tail_rec_new = (!expr) {
  ! (!) { ! stmt_tail_rec, expr }
};
stmt_tail_rec_get = (!stmt) {
  stmt_type, expr = stmt();
  ! expr
};
stmt_assign_new = (!assign) {
  ! (!) { ! stmt_assign, assign }
};
stmt_assign_get = (!stmt) {
  stmt_type, assign = stmt();
  ! assign
};
stmt_to_function = (!stmt) {
  if (eq(stmt_type_get(stmt), stmt_assign), (break) {
    assign = stmt_assign_get(stmt);
    ids, call_exp = assign();
    func = expr_to_function(call_exp);
    if(eq(func, 0), (break) { ! 0 });
    ! (!) { ! ids, func }
  });
  ! 0
};

expr_call = 0;
expr_texp = 1;
expr_get_type = (!expr) {
  expr_type, expr = expr();
  ! expr_type
};
expr_call_new = (!expr, op_list) {
  ! (!) { ! expr_call, (!) { ! expr, op_list }}
};
expr_texp_new = (!texp) {
  ! (!) { ! expr_texp, (!) { ! texp }}
};
expr_texp_get_texp = (!expr) {
  expr_type, expr = expr();
  texp = expr();
  ! texp
};
expr_call_get_expr = (!expr) {
  expr_type, expr = expr();
  expr, op_list = expr();
  ! expr
};
expr_call_get_op_list = (!expr) {
  expr_type, expr = expr();
  texp, op_list = expr();
  ! op_list
};
expr_to_function = (!expr) {
  if (ne(expr_get_type(expr), expr_texp), (break) { ! 0 });
  ! texp_to_function(expr_texp_get_texp(expr))
};



/ parsing
parse_statement = (!tokenizer) {
  tokenizer, matches = eat_token(tokenizer, "!");
  if(matches, (break) {
    tokenizer, call_exps = parse_expr_list(tokenizer);
    ! tokenizer, stmt_return(call_exps)
  });
  tokenizer, assign = parse_assignment_statement(tokenizer);
  if(ne(assign, 0), (break) {
    ! tokenizer, stmt_assign_new(assign)
  });
  tokenizer, expr = parse_tail_recursion_statement(tokenizer);
  if(ne(expr, 0), (break) {
    ! tokenizer, stmt_tail_rec_new(expr)
  });
  ! tokenizer, 0
};

parse_function = (!orig_tokenizer) {
  l, r = orig_tokenizer();
  tokenizer, mt = eat_token(orig_tokenizer, "(");
  if (not(mt), (break) { ! tokenizer, 0 });
  tokenizer, is_returning = parse_is_returning(tokenizer);
  fname_l, fname_r = gen_label();
  tokenizer, new_args = parse_id_list(tokenizer); 
  tokenizer, mt = eat_token(tokenizer, ")");
  if (not(mt), (break) { ! orig_tokenizer, 0 });
  tokenizer, cexp = parse_block(tokenizer);
  if (eq(cexp, 0), (break) { ! orig_tokenizer, 0 });
  ! tokenizer, (!) { ! fname_l, fname_r, new_args, is_returning, cexp }
};

parse_cexp = (!orig_tokenizer) {
  tokenizer, assign = parse_statement(orig_tokenizer);
  if(eq(assign, 0), (break) { ! orig_tokenizer, 0 });
  tokenizer, cexp = parse_cexp(tokenizer);
  ! tokenizer, (!) { ! assign, cexp }
};

parse_block = (!tokenizer) {
  tokenizer, mt = eat_token(tokenizer, "{");
  if (not(mt), (break) { ! tokenizer, 0 });
  tokenizer, cexp = parse_cexp(tokenizer);
  tokenizer, mt = eat_token(tokenizer, "}");
  ! tokenizer, cexp
};

parse_assignment_statement = (!orig_tokenizer) {
  tokenizer, ids = parse_assign_left(orig_tokenizer);
  tokenizer, call_exp = parse_expr(tokenizer);
  tokenizer, mt = eat_token(tokenizer, ";");
  if(not(mt), (break) { ! orig_tokenizer, 0 });
  ! tokenizer, assign_new(ids, call_exp)
};

parse_tail_recursion_statement = (!tokenizer) {
  l, r = tokenizer();
  tokenizer, expr = parse_expr(tokenizer);
  if (eq(expr, 0), (break) { ! tokenizer, 0 });
  if (ne(expr_get_type(expr), expr_call), (break) {
    error(l);
    break()
  });
  ! tokenizer, expr
};

/ todo: switch to list
parse_expr_list = (!tokenizer) {
  tokenizer, call_exp = parse_expr(tokenizer);
  if(eq(call_exp, 0), (break) { ! tokenizer, make_nil() });
  l, r = tokenizer();
  tokenizer, matches = eat_token(tokenizer, ",");
  tokenizer, tree = parse_expr_list(tokenizer);
  if (and(not(is_nil(tree)), not(matches)), (break) {
    error(l);
    break()
  });
  leaf = make_leaf(call_exp, 0);
  tree = make_internal(leaf, tree);
  ! tokenizer, tree
};

parse_call_args = (!orig_tokenizer) {
  tokenizer, mt = eat_token(orig_tokenizer, "(");
  if(not(mt), (break) { ! tokenizer, 0 });
  tokenizer, op_list = parse_expr_list(tokenizer);
  tokenizer, mt = eat_token(tokenizer, ")");
  if(not(mt), (break2) { ! orig_tokenizer, 0 });
  tmp_tokenizer, mt = eat_token(tokenizer, "{");
  if(mt, (break2) { ! orig_tokenizer, 0  });
  ! tokenizer, op_list
};
parse_expr = (!tokenizer) {
  tokenizer, texp = parse_texp(tokenizer);
  if(eq(texp, 0), (break) { ! tokenizer, 0 });
  tokenizer, expr = parse_expr_help(tokenizer, expr_texp_new(texp));
  ! tokenizer, expr
};
parse_expr_help = (!tokenizer, expr) {
  tokenizer, op_list = parse_call_args(tokenizer);
  if(eq(op_list, 0), (break) { ! tokenizer, expr });
  tokenizer, expr = parse_expr_help(tokenizer, expr_call_new(expr, op_list));
  ! tokenizer, expr
};

parse_program = (!tokenizer) {
  tokenizer, stmt = parse_statement(tokenizer);
  if(eq(stmt, 0), (break) { ! 0 });
  tmp = parse_program(tokenizer);
  ! cons(stmt, tmp)
};

/ printing
print_expr = (!fl, fr, old_context, ids, gl, gr, expr) {
  if(eq(expr, 0), (break) { ! 0 });
  if (eq(expr_get_type(expr), expr_texp), (break) {
    print_texp(fl, fr, old_context, ids, gl, gr, expr_texp_get_texp(expr));
    ! 0
  });
  if (eq(expr_get_type(expr), expr_call), (break) {
    context = map_tree(old_context, (!l r) {
      if(search_tree(ids, l, r), (break) { ! make_nil() });
      ! make_leaf(l, r)
    });
    map_tree(context, (!l r) { ! printf("push qword [{}{}]\n")(fl, fr)(l, r) });
    print_function_application(fl, fr, old_context, (a, b) { a() }, gl, gr, expr);

    rev_context = reverse_tree(context);
    printf("push rax\n");
    map_tree(ids, (!l r) { ! printf("pop qword [{}{}]\n")(fl, fr)(l, r) });
    map_tree(rev_context, (!l r) { ! printf("pop qword [{}{}]\n")(fl, fr)(l, r) });
    ! 0
  })
  ! 0
};

print_statement = (!fl, fr, context, is_returning, gl, gr, stmt) {
  if(eq(stmt_type_get(stmt), stmt_return_id), (break) {
    call_exps = stmt_return_get(stmt);
    printf("mov rsp, [{}{}]\n")(fl, fr)(gl, gr);
    map_tree(reverse_tree(call_exps), (!call_exp r) {
      il, ir = gen_label();
      printf("jmp {}_end\n{}{}: dq 0\n{}_end:\n")(il, ir)(fl, fr)(il, ir)(il, ir);
      print_expr(fl, fr, context, make_leaf(il, ir), gl, gr, call_exp);
      printf("pop rax\npush qword [{}{}]\npush rax\n")(fl, fr)(il, ir);
    });
    printf("pop rcx\npop rax\njmp rcx\n");
    ! stmt
  });
  if (eq(stmt_type_get(stmt), stmt_assign), (break) {
    assign = stmt_assign_get(stmt);
    ids, call_exp = assign();
    print_expr(fl, fr, context, ids, gl, gr, call_exp);
    ! stmt
  });
  if (eq(stmt_type_get(stmt), stmt_tail_rec), (break) {
    print_function_application(fl, fr, context, is_returning, gl, gr, stmt_tail_rec_get(stmt));
    ! stmt
  });
};

print_function_application = (!fl, fr, context, is_returning, gl, gr, expr) {
  sub_expr = expr_call_get_expr(expr);
  op_list = expr_call_get_op_list(expr);
  al, ar = aexp_to_range(get_aexp_from_expr(sub_expr));
  if_else(or(eq(al, ar), search_tree(context, al, ar)), (break) {
    print_call_exp_args(fl, fr, context, gl, gr, op_list);
    il, ir = gen_label();
    printf("jmp {}_end\n{}{}: dq 0\n{}_end:\n")(il, ir)(fl, fr)(il, ir)(il, ir);
    print_expr(fl, fr, context, make_leaf(il, ir), gl, gr, sub_expr);
    printf("push qword [{}{}]\n")(fl, fr)(il, ir);
    if_else_ret(is_returning,
      (!) { ! printf("call runtime_call_ret\n") },
      (!) { ! printf("jmp runtime_call\n") },
    );
    break()
  },
  (break) {
    print_call_exp_args(fl, fr, context, gl, gr, op_list);
    if_else_ret(is_returning,
      (!) { ! printf("call {}\n")(al, ar) },
      (!) { ! printf("jmp {}\n")(al, ar) },
    );
    break()
  });
};

print_program = (!program, context) {
  if (eq(program, 0), (break) { ! 0 });
  stmt = head(program);

  id_func = stmt_to_function(stmt);
  if(eq(id_func, 0), (break) {
    ids = filter_context(get_assignment_vars(stmt), context);
    map_tree(ids, (!l r) { ! printf("jmp {}_end\n{}: dq 0\n{}_end:\n")(l, r)(l, r)(l, r)});
    print_statement(0, 0, make_nil(), (a, b) { a() }, 0, 0, stmt);
    ! print_program(tail(program), make_internal(context, ids))
  });
  if(ne(id_func, 0), (break) {
    ids func = id_func();
    fname = first_leaf(ids);
    fname_l fname_r func_args is_returning cexp = func();
    func = (!) { ! tree_leaf_get_l(fname), tree_leaf_get_r(fname), func_args, is_returning, cexp };
    print_function(make_nil(), 0, 0, func);
    break()
  });
  ! print_program(tail(program), context)
};

aexp_to_range = (!aexp) {
  if(eq(aexp, 0), (break) {
    ! 0, 0
  });
  l r = aexp();
  ! l, r
};

check_eof = (!tokenizer) {
  l, r = tokenizer();
  if(eq(l, r), (break) {
    ! (a, b) { a() }
  });
  ! (a, b) { b() }
};

stderr_print = (!st, len) {
  sysc(1, 2, st, len, 0, 0, 0);
  ! 0
};
warning = (!loc) {
  stderr_print("warning:\n", 9);
  stderr_print(sub(loc, 10), 20);
  stderr_print("\n", 1);
  ! 0
};
error = (!loc) {
  stderr_print("error:\n", 9);
  stderr_print(sub(loc, 10), 20);
  stderr_print("\n", 1);
  exit()
};

inpf_name, outf_name = (!argc, argv1, inpf, outf) { ! inpf, outf }();
inpf = sysc(2, inpf_name, 0, 65535, 0, 0, 0);
outf = sysc(2, outf_name, 578, 65535, 0, 0, 0);
/ get input size
flen = (!) {
  buff = malloc_func(192);
  sysc(5, inpf, buff, 0, 0, 0, 0);
  ! deref(add(buff, 48))
}();


/ mmap input
input = sysc(9, 0, flen, 3, 2, inpf, 0);
flen = add(flen, input);
buffer = malloc_func(4096);

printf("section .rwx progbits alloc exec write align=16\nglobal _start\n");
printf("add:\npop rbx\npop rax\npop rcx\npush rbx\nadd rax, rcx\nret\n");
printf("sub:\npop rbx\npop rax\npop rcx\npush rbx\nsub rax, rcx\nret\n");
printf("sysc:\npop rcx\npop rax\npop rdi\npop rsi\npop rdx\npop r10\npop r8\npop r9\npush rcx\nsyscall\nret\n");
printf("deref:\npop rdx\npop rax\npush rdx\nmov rax, [rax]\nret\n");
printf("deref_byte:\npop rdx\npop rax\npush rdx\nmov al, [rax]\nand rax, 0xFF\nret\n");
printf("return:\npop rcx\npop rax\npush rcx\nret\n");
printf("mul:\npop rcx\npop rax\npop rdx\nmul rdx\njmp rcx\n");
printf("div:\npop rcx\npop rax\nmov rdx, 0\npop rdi\nidiv rdi\njmp rcx\n");
printf("mod:\npop rcx\npop rax\nmov rdx, 0\npop rdi\nidiv rdi\nmov rax, rdx\njmp rcx\n");
printf("is_digit:\npop rax\npop rdi\npush rax\ncmp rdi, 48\njl not_digit\ncmp rdi, 57\njg not_digit\nyes_digit:\nmov rax, 1\nret\nnot_digit:\nmov rax, 0\nret\n");
printf("is_alpha:\npop rax\npop rdi\npush rax\ncmp rdi, 97\njl nalp\ncmp rdi, 122\njg nalp\nyalp:\nmov rax, 1\nret\nnalp:\ncmp rdi, 65\njl nalp2\ncmp rdi, 90\njg nalp2\nyalp2:\nmov rax, 1\nret\nnalp2:\nmov rax, 0\nret\n");
printf("buff_curr: dq 0\nprint_char:\nmov rax, [buffer]\nmov rdx, [buff_curr]\nmov rcx, [rsp+8]\nmov [rax+rdx], rcx\nadd rdx, 1\nmov [buff_curr], rdx\ncmp rdx, 4096\njne print_char_done\ncall flush_buffer\nprint_char_done:\npop rax\nmov [rsp], rax\nret\nflush_buffer:\nmov rdx, [buff_curr]\nmov rsi, [buffer]\nmov rdi, [outf]\nmov rax, 1\nsyscall\nmov qword [buff_curr], 0\nret\n");
printf("compare: ; takes in (a b equal_cont diff_cont) and calls equal_cont or diff_cont depending on a == b\n  pop rax\n  pop rcx\n  pop rdi\n  pop rsi\n  cmp rax, rcx\n  jne compare_fail\n  push rdi\n  jmp runtime_call\n  compare_fail:\n    push rsi\n    jmp runtime_call\nexit:\n  call flush_buffer\n  mov rax, 60\n  mov rdi, 0\n  syscall\nruntime_call:\n  ; first input is closure containing | number of operands including function, function, environment |\n  mov rdx, [rsp]\n  mov rcx, [rdx]\n  shl rcx, 3\n  add rdx, 8\n  add rsp, 8\n  sub rsp, rcx\n  runtime_call_loop:\n  sub rcx, 8\n  mov rax, [rdx+rcx]\n  mov [rsp+rcx], rax\n  cmp rcx, 0\n  jne runtime_call_loop\n  \n  pop rax\n  jmp rax\nruntime_call_ret:\n  ; first input is closure containing | number of operands including function, function, environment |\n  pop rbp\n  mov rdx, [rsp]\n  mov rcx, [rdx]\n  shl rcx, 3\n  add rdx, 8\n  add rsp, 8\n  sub rsp, rcx\n  runtime_call_ret_loop:\n  sub rcx, 8\n  mov rax, [rdx+rcx]\n  mov [rsp+rcx], rax\n  cmp rcx, 0\n  jne runtime_call_ret_loop\n  \n  pop rax\n  push rbp\n  jmp rax\npage_pointer:\ndq 0\nmemory_left:\ndq 0\nmalloc:\n  push rcx\n  push rdx\n  push rsi\n  push rdi\n  push r8\n  push r9\n  push r10\n  push r11\n  cmp [memory_left], rdi\n  jl new_page\n  jmp malloc_ret\n  \n  new_page:\n  push rdi\n  mov rsi, 4096\n  mov rdi, 0               ; adress\n  mov rdx, 3               ; PROT_READ | PROT_WRITE\n  mov r10, 0x22           ; MAP_SHARED | MAP_ANONYMOUS\n  mov r8, -1              ; file descriptor empty, anonymous\n  mov r9, 0               ; offset\n  mov rax, 9               ; mmap\n  syscall\n  pop rdi\n  mov [page_pointer], rax\n  mov qword [memory_left], 4096\n  malloc_ret:\n  mov rax, [page_pointer]\n  add [page_pointer], rdi\n  sub [memory_left], rdi\n  pop r11\n  pop r10\n  pop r9\n  pop r8\n  pop rdi\n  pop rsi\n  pop rdx\n  pop rcx\n  ret\nmalloc_func:\n  pop rax\n  pop rdi\n  push rax\n  jmp malloc\nscmp:\n  cmp rdi, rsi\n  je end_of_string\n  cmp rdx, rcx\n  je end_of_string\n  sub rax, rax\n  mov al, [rdi]\n  push rbx\n  sub rbx, rbx\n  mov bl, [rdx]\n  sub rax, rbx\n  pop rbx\n  add rdi, 1\n  add rdx, 1\n  cmp rax, 0\n  je scmp\n  jl less\n  mov rax, 1\n  ret\n  less:\n  mov rax, -1\n  ret\n  end_of_string:\n  mov rax, 0\n  cmp rdi, rsi\n  jne not_first_shorter\n  add rax, -1\n  not_first_shorter:\n  cmp rdx, rcx\n  jne not_second_shorter\n  add rax, 1\n  not_second_shorter:\n  ret\ncur_label:\n  dq 1\ngen_label:\n  mov rdi, 8\n  call malloc\n  mov rdx, rax\n  mov rcx, [cur_label]\n  add qword [cur_label], 1\n  mov qword [rdx], 102\n  add rdx, 1\n  gen_label_loop:\n  mov rbx, rcx\n  and rbx, 7\n  add rbx, 48\n  mov [rdx], bl\n  add rdx, 1\n  shr rcx, 3\n  cmp rcx, 0\n  jne gen_label_loop\n  pop rcx\n  push rdx\n  jmp rcx\nstr_cmp_func:\n  pop rax\n  pop rdi\n  pop rsi\n  pop rdx\n  pop rcx\n  push rax\n  call scmp\n  ret\n");
printf("_start:\n");

tokenizer = make_tokenizer(input, flen);
res = parse_program(tokenizer);
print_program(res, make_nil());
exit();
