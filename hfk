jmp start

sysc:
    pop rcx

    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    pop r8
    pop r9

    push rcx
    syscall
    ret

deref: ; takes (ptr) and returns *ptr
  pop rdx
  pop rax
  push rdx
  mov rax, [rax]
  ret

deref_byte: ; takes (ptr) and returns *ptr
  pop rdx
  pop rax
  push rdx
  mov al, [rax]
  and rax, 0xFF
  ret

return:
  pop rcx
  pop rax
  push rcx
  ret

add_func: ; takes (ret a b) and returns a+b
  pop rbx
  pop rax
  pop rcx
  push rbx
  add rax, rcx
  ret

div_func:
  pop rcx
  pop rax
  mov rdx, 0
  pop rdi
  idiv rdi
  jmp rcx

mul_func: ; UNSIGNED
  pop rcx
  pop rax
  pop rdx
  mul rdx
  jmp rcx

mod_func:
  pop rcx
  pop rax
  mov rdx, 0
  pop rdi
  idiv rdi
  mov rax, rdx
  jmp rcx

compare: ; takes in (a b equal_cont diff_cont) and calls equal_cont or diff_cont depending on a == b
  pop rax
  pop rcx
  pop rdi
  pop rsi
  cmp rax, rcx
  jne compare_fail
  push rdi
  jmp runtime_call

  compare_fail:
    push rsi
    jmp runtime_call

$callcc = (ret, cont) {
  cont((res) { return ret res })
};

$or = (ret cont1 cont2) {
  cont1, () { return ret cont1 }, () { return ret cont2 }
};

$if = (ret v cont) {
  break = () { return ret 0 };
  v, () { cont break }, break
};
$if_else = (ret v cont1 cont2) {
  break = () { return ret 0 };
  v, () { cont1 break }, () { cont2 break }
};
$if_ret = (ret v cont) {
  break = () { return ret 0 };
  v, () {
    cont();
    break
  },
  break
};

$if_else_ret = (ret v cont1 cont2) {
  v, () { return ret {cont1} },
  () { return ret {cont2} }
};

$ne = (ret a b) {
  compare(a, b, () { return ret (x y) {y} }, () { return ret (x y) {x} })
};
$not = (ret x) {
  x(() { return ret (a b) {b} }, () { return ret (a b) {a} })
};

$eq = (ret a b) {
  compare(a, b, () { return ret (x y) {x} }, () { return ret (x y) {y} })
};

exit:
  call flush_buffer
  mov rax, 60
  mov rdi, 0
  syscall
error:
  mov qword [outf], 2
  jmp error_help
$error_help = (num) {
  {printf "error {}\n" num {add_func num 10}};
  {sysc 60 1 0 0 0 0 0};
  exit
};

runtime_call:
  ; first input is closure containing | number of operands including function, function, environment |
  mov rdx, [rsp]
  mov rcx, [rdx]
  shl rcx, 3
  add rdx, 8
  add rsp, 8
  sub rsp, rcx

  runtime_call_loop:
  sub rcx, 8
  mov rax, [rdx+rcx]
  mov [rsp+rcx], rax
  cmp rcx, 0
  jne runtime_call_loop
  
  pop rax
  jmp rax

runtime_call_ret:
  ; first input is closure containing | number of operands including function, function, environment |
  pop rbp
  mov rdx, [rsp]
  mov rcx, [rdx]
  shl rcx, 3
  add rdx, 8
  add rsp, 8
  sub rsp, rcx

  runtime_call_ret_loop:
  sub rcx, 8
  mov rax, [rdx+rcx]
  mov [rsp+rcx], rax
  cmp rcx, 0
  jne runtime_call_ret_loop
  
  pop rax
  push rbp
  jmp rax

page_pointer:
dq 0
memory_left:
dq 0
malloc:
  push rcx
  push rdx
  push rsi
  push rdi
  push r8
  push r9
  push r10
  push r11

  cmp [memory_left], rdi
  jl new_page
  jmp malloc_ret
  
  new_page:
  push rdi
  mov rsi, 4096
  mov rdi, 0               ; adress
  mov rdx, 3               ; PROT_READ | PROT_WRITE
  mov r10, 0x22           ; MAP_SHARED | MAP_ANONYMOUS
  mov r8, -1              ; file descriptor empty, anonymous
  mov r9, 0               ; offset
  mov rax, 9               ; mmap
  syscall
  pop rdi
  mov [page_pointer], rax
  mov qword [memory_left], 4096

  malloc_ret:
  mov rax, [page_pointer]
  add [page_pointer], rdi
  sub [memory_left], rdi

  pop r11
  pop r10
  pop r9
  pop r8
  pop rdi
  pop rsi
  pop rdx
  pop rcx
  ret
malloc_func:
  pop rax
  pop rdi
  push rax
  jmp malloc

$make_nil = (!) { ! (cont_nil cont_leaf cont_internal) {cont_nil} };
$make_leaf = (!l r) { ! (cont_nil cont_leaf cont_internal) {cont_leaf l r} };
$make_internal = (!a b) { ! (cont_nil cont_leaf cont_internal) {cont_internal a b} };

scmp:
  cmp rdi, rsi
  je end_of_string
  cmp rdx, rcx
  je end_of_string

  sub rax, rax
  mov al, [rdi]
  push rbx
  sub rbx, rbx
  mov bl, [rdx]
  sub rax, rbx
  pop rbx
  add rdi, 1
  add rdx, 1
  cmp rax, 0
  je scmp
  jl less
  mov rax, 1
  ret
  less:
  mov rax, -1
  ret

  end_of_string:
  mov rax, 0
  cmp rdi, rsi
  jne not_first_shorter
  add rax, -1
  not_first_shorter:
  cmp rdx, rcx
  jne not_second_shorter
  add rax, 1
  not_second_shorter:
  ret

cur_label:
  dq 1
gen_label:
  mov rdi, 8
  call malloc
  mov rdx, rax
  mov rcx, [cur_label]
  add qword [cur_label], 1
  mov qword [rdx], "f"
  add rdx, 1
  gen_label_loop:
  mov rbx, rcx
  and rbx, 7
  add rbx, "0"
  mov [rdx], bl
  add rdx, 1
  shr rcx, 3
  cmp rcx, 0
  jne gen_label_loop
  pop rcx
  push rdx
  jmp rcx


str_cmp_func:
  pop rax
  pop rdi
  pop rsi
  pop rdx
  pop rcx
  push rax
  call scmp
  ret

$str_equal_func = (ret a b l r) {
  res = str_cmp_func(a, b, l, r);
  return ret {eq 0 res}
};
  
$print_range = (ret a b) {
  {if {eq a b} (break) { return ret 0 }};
  {print_char {deref_byte a}};
  print_range ret {add_func a 1} b
};

buff_curr: dq 0
print_char:
  mov rax, [buffer]
  mov rdx, [buff_curr]
  mov rcx, [rsp+8]
  mov [rax+rdx], rcx
  add rdx, 1
  mov [buff_curr], rdx
  cmp rdx, 4096
  jne print_char_done
  call flush_buffer
  print_char_done:
  pop rax
  mov [rsp], rax
  ret
flush_buffer:
  mov rdx, [buff_curr]
  mov rsi, [buffer]
  mov rdi, [outf]
  mov rax, 1
  syscall
  mov qword [buff_curr], 0
  ret

$print_num_help = (v cont) {
  {if {eq v 0}, (break) { cont }};
  print_num_help {div_func v 10}, () {
    {print_char {add_func {deref_byte "0"} {mod_func v 10}}};
    cont
  }
};
$print_num = (ret v) { print_num_help(v, () { return ret 0 }) };

$printf = (ret l) {
  lb = deref_byte(l);
  {if {eq lb 0}, (break) {
    return ret 0
  }};
  {if {eq lb 123}, (break a b) {
    {print_range a b};
    printf ret {add_func l 2}
  }};
  {print_char deref_byte(l)};
  printf ret {add_func l 1}
};

$tree_size = (ret tree) {
  tree(
    () { return ret 0 },
    (l, r) { return ret 1 },
    (a, b) {
      a = tree_size(a);
      b = tree_size(b);
      return ret add_func(a, b)
    }
  )
};

$map_tree = (ret tree action) {
  tree,
  () { return ret make_nil() },
  (l, r) {
    return ret action(l, r)
  },
  (a, b) {
    a = map_tree(a, action);
    b = map_tree(b, action);
    return ret make_internal(a, b)
  }
};

$first_leaf = (ret tree) {
  tree(
    () { return ret make_nil() },
    (l, r) { return ret make_leaf(l, r) },
    (a, b) {
      a_leaf = first_leaf(a);
      b_leaf = first_leaf(b);
      a_leaf(
        () { return ret b_leaf },
        (l, r) { return ret a_leaf },
        (a, b) { return ret b_leaf }
      )
    }
  )
};

$map_tree_iota_help = (ret n tree action) {
  tree,
    () { return(ret, n, make_nil()) },
    (l, r) { return(ret, add_func(n, 1), action(n, l, r)) },
    (a, b) {
      n, new_a = map_tree_iota_help(n, a, action);
      n, new_b = map_tree_iota_help(n, b, action);
      res = make_internal(new_a, new_b);
      return ret n res
    }
};

$map_tree_iota = (ret tree action) {
  n, t = map_tree_iota_help(0, tree, action);
  return ret t
};

$reverse_tree = (ret tree) {
  tree(
    () { return ret make_nil() },
    (l, r) { return ret make_leaf(l, r) },
    (a, b) {
      return ret make_internal(reverse_tree(b), reverse_tree(a))
    }
  )
};

$search_tree = (ret tree l r) {
  tree(
    () { return ret (a, b) { b } },
    (a, b) {
      res = str_equal_func(l, r, a, b);
      return ret res
    },
    (a, b) {
      search_a = search_tree(a, l, r);
      {if search_a (break) { return ret search_a }};
      search_b = search_tree(b, l, r);
      return ret search_b
    }
  )
};

is_alpha:           ; is alpha
  cmp rdi, "a"      ; a
  jl nalp
  cmp rdi, "z"     ; z
  jg nalp
  yalp:
  mov rax, 1
  ret
  nalp:
  mov rax, 0
  ret

is_alpha_ret:
  pop rax
  pop rdi
  push rax
  call is_alpha
  ret

is_digit:           ; is alpha
  cmp rdi, "0"
  jl not_digit
  cmp rdi, "9"
  jg not_digit
  yes_digit:
  mov rax, 1
  ret
  not_digit:
  mov rax, 0
  ret

is_digit_ret:
  pop rax
  pop rdi
  push rax
  call is_digit
  ret

$read_whitespace = (ret l r) {
  lb = deref_byte(l);
  {if eq(l, r), (break) { return ret l r }};
  {if or(eq(lb, 10), eq(lb, 32)) (break) {
    read_whitespace ret add_func(l, 1) r
  }};
  return ret l r
};

read_identifier:
  pop rcx
  pop r8
  pop qword [flen]
  push rcx
  push qword [flen]
  push r8
  call read_whitespace
  mov r8, rax
  pop qword [flen]
  push r8
  irloo:
  sub rcx, rcx
  mov cl, [r8]
  mov rdi, rcx
  call is_alpha
  cmp rax, 1
  je identifier_ret_loop_continue
  call is_digit
  cmp rax, 1
  je identifier_ret_loop_continue
  cmp rcx, "_"
  je identifier_ret_loop_continue
  jmp irdon
  identifier_ret_loop_continue:
  add r8, 1
  jmp irloo
  irdon:
  pop rax
  mov rdx, r8
  pop rcx
  push rdx
  push rax
  push qword [flen]
  mov rax, r8
  jmp rcx

start:

$matches = (ret a b) {
  {if {eq {deref_byte a} 0} (break) { return ret (a b) { a } }};
  {if {ne {deref_byte a} {deref_byte b}} (break) { return ret (a b) { b } }};
  matches ret {add_func a 1} {add_func b 1}
};

$matches_strict = (!pattern, l, r) {
  if (eq(deref_byte(pattern), 0) (break) { ! eq(l, r) });
  if (ne(deref_byte(pattern), deref_byte(l)) (break) { ! (a, b) { b } });
  ! matches_strict(add_func(pattern, 1), add_func(l, 1), r)
};
$token_matches = (!pattern, token) {
  t, l, r = token();
  ! matches_strict(pattern, l, r)
};

$read_const_string = (ret orig_l r) {
  l r = {read_whitespace orig_l r};
  lb = {deref_byte l};
  {if {ne lb 34} (break) { return ret orig_l r 0 }};
  l_start = add_func(l, 1);
  l_end r = read_until(34, l_start, r);
  l = add_func(l_end, 1);
  return ret l r (!) { ! l_start l_end }
};
$token_id = 1;
$token_string = 3;
; 0 -> special, 1 -> id, 2 -> number, 3 -> string, 4 -> comment, 5 -> newline, 6 -> eof
; returns l r type il ir
$read_token = (ret l r) {
  l r = read_whitespace(l, r);
  {if {eq 34 {deref_byte l}} (break) {
    return ret {add_func l 1} r 0 l {add_func l 1}
  }};
  {if {matches "$" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches "!" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches "(" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches ")" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches "{" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches "}" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches "=" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches ";" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches ":" l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  {if {matches "," l} (break) { return ret {add_func l 1} r 0 l {add_func l 1} }};
  l r il ir = {read_identifier l r};
  {if {ne il ir} (break) { return ret l r token_id il ir }};
  error l
};

$make_tokenizer = (!l, r) {
  ! (!) {
    l, r, t, tl, tr = read_token(l, r);
    ! (!) { ! t, tl, tr }, make_tokenizer(l, r)
  }
};

$tokenizer_to_lr = (!tokenizer) {
  token, tokenizer = tokenizer();
  t, l, r = token();
  ! l, add_func(l, 100000)
};

$token_type = (!token) {
  t, tl, tr = token();
  ! t
};

$read_is_returning = (!orig_tokenizer) {
  token, tokenizer = orig_tokenizer();
  if(token_matches("!", token), (break) {
    ! (a b) { a }, tokenizer
  });
  ! (a b) { b }, orig_tokenizer
};

$read_id_list = (!old_tokenizer) {
  token, tokenizer = old_tokenizer();
  if (eq(token_type(token), 1) (break) {
    t, tl, tr = token();
    tree, tokenizer = read_id_list(tokenizer);
    ! make_internal(make_leaf(tl, tr), tree), tokenizer
  });
  if (token_matches(",", token) (break) {
    tree, tokenizer = read_id_list(tokenizer);
    ! tree, tokenizer
  });
  ! make_nil(), old_tokenizer
};

$read_function = (!orig_tokenizer) {
  token, tokenizer = orig_tokenizer();
  if (not(token_matches("(", token)), (break) { ! 0, orig_tokenizer });
  is_returning, tokenizer = read_is_returning(tokenizer);
  fname_l, fname_r = gen_label(); 
  new_args, tokenizer = read_id_list(tokenizer); 
  token, tokenizer = tokenizer();
  if (not(token_matches(")", token)), (break) { ! 0, orig_tokenizer });
  token, tokenizer = tokenizer();
  if (not(token_matches("{", token)), (break) { ! 0, orig_tokenizer });
  cexp, tokenizer = read_cexp(tokenizer);
  token, tokenizer = tokenizer();
  {if {not token_matches("}", token)} (break) { ! 0, orig_tokenizer }};
  ! (!) { ! fname_l fname_r new_args is_returning cexp }, tokenizer
};

$print_function = (ret old_context, gl, gr, func) {
  fname_l fname_r func_args is_returning cexp = func();
  new_context = merge_context(old_context, func_args);
  cids = get_cexp_vars(cexp);
  cids = filter_context(cids, new_context);
  gl, gr, cids = if_else_ret(is_returning, (!) {
    gl, gr = gen_label();
    cids = make_internal(cids, make_leaf(gl, gr));
    ! gl, gr, cids
  },
  (!) { ! gl, gr, cids });
  printf("jmp {}_end\n", fname_l, fname_r);
  map_tree(make_internal(new_context, cids), (!l r) { printf("{}{}: dq 0\n", fname_l, fname_r, l, r); });
  printf("{}:\n", fname_l, fname_r);
  if_ret(is_returning, (!) {
    printf("pop rax\n");
  });
  {map_tree new_context (!l r) { {printf "pop qword [{}{}]\n" fname_l fname_r l r}; }};
  new_context = if_else_ret(is_returning, (!) {
    printf("push rax\n");
    printf("mov [{}{}], rsp\n", fname_l, fname_r, gl, gr);
    ! make_internal(new_context, make_leaf(gl, gr))
  },
  (!) {
    ! new_context
  });
  print_cexp(fname_l, fname_r, new_context, is_returning, gl, gr, cexp);
  {if_ret is_returning (!) { {printf "ret\n"}; }};
  printf("{}_end:\n", fname_l, fname_r);
  return ret 0
};

$get_aexp_from_texp = (ret texp) {
  texp_type, texp = texp();
  none = (a) { return ret 0 };
  {if {eq texp 0} (break) { return ret 0}};
  texp(none, (aexp) { return ret aexp }, none, none)
};

$texp_string = 0;
$texp_block = 1;
$texp_func = 2;
$texp_aexp = 3;
; returns l r texp
$read_texp = (!orig_l r) {
  l = orig_l;
  return_string =     (l r t) { ! l, r, (!) { ! texp_string, (x aexp block func) { x t } } };
  return_block =      (l r b) { ! l, r, (!) { ! texp_block, (x aexp block func) { block b } } };
  return_func =       (l r f) { ! l, r, (!) { ! texp_func, (x aexp block func) { func f } } };
  return_aexp =       (l r a) { ! l, r, (!) { ! texp_aexp, (x aexp block func) { aexp a } } };
  nl, nr, t, tl, tr = read_token(l, r);
  {if {eq t 1} (break) { return_aexp(nl, nr, (!) { ! tl tr }) }};
  {if matches("{", tl) (break) {
    cexp, tokenizer = read_cexp(make_tokenizer(nl, nr));
    l, r = tokenizer_to_lr(tokenizer);
    l, r, t, tl, tr = read_token(l, r);
    {if not(matches("}", tl)) (break2) { break }};
    return_block(l, r, (!) { ! cexp })
  }};
  tokenizer = make_tokenizer(l, r);
  func, tokenizer = read_function(tokenizer);
  if(ne(func, 0), (break) {
    token, tmp_tokenizer = tokenizer();
    t, tl, tr = token();
    return_func(tl, r, (!) { ! func })
  });
  lo, hi, string = read_const_string(l, r);
  {if {ne string 0} (break) {
    return_string(lo, hi, string)
  }};
  ! orig_l, r, 0
};

$print_texp = (!fl, fr, old_context, ids, gl, gr, texp) {
  if(eq(texp, 0), (break) { ! 0 });
  texp_type, texp = texp();
  callcc((break) {
    texp
    (string) {
      print_const_string(string);
      map_tree(ids, (!l r) { ! printf("pop qword [{}{}]\n", fl, fr, l, r) });
      ! 0
    }
    (aexp) {
      a, b = aexp();
      print_aexp(old_context, fl, fr, a, b);
      map_tree(ids, (!l r) { ! printf("pop qword [{}{}]\n", fl, fr, l, r) });
      ! 0
    }
    (block) {
      cexp = block();
      print_cexp(fl, fr, old_context, (a b) { a }, gl, gr, cexp);
      printf("push rax\n");
      map_tree(ids, (!l r) { ! printf("pop qword [{}{}]\n", fl, fr, l, r) });
      ! 0
    }
    (f) {
      func = f(); 
      fname_l fname_r func_args is_returning cexp = {func};
      old_context = filter_context(old_context, func_args);
      print_function(old_context, gl, gr, func);
      context = {make_internal {make_leaf fname_l fname_r} old_context};
      printf("mov rdi, ");
      size = tree_size(context);
      print_num(mul_func(8, add_func(1, size)));
      printf("\ncall malloc\n");

      map_tree_iota(context, (!n l r) {
        {if_else_ret {eq l fname_l} (!) {
          {printf "mov qword [rax+"};
          {print_num {mul_func 8 {add_func 1 n}}};
          {printf "], {}\n" l r};
        }, (!) {
          {printf "mov rcx, [{}{}]\nmov qword [rax+" fl fr l r};
          {print_num {mul_func 8 {add_func 1 n}}};
          {printf "], rcx\n"};
        }};
      });
      printf("mov qword [rax], ");
      print_num(size);
      printf("\npush rax\n");
      map_tree(ids, (!l r) { printf("pop qword [{}{}]\n", fl, fr, l, r); });
      ! 0
    }
  })
};

$texp_to_function = (!texp) {
  texp_type, texp = texp();
  if(eq(texp_type, texp_func) (break) {
    texp(
      (string) { ! 0 },
      (aexp) { ! 0 },
      (block) { ! 0 },
      (f) {
        func = f();
        ! func
      }
    )
  });
  ! 0
};

$read_until = (ret c l r) {
  lb = deref_byte(l);
  {if eq(lb, c) (break) { return ret l r }};
  read_until ret c add_func(l, 1) r
};

$print_const_string = (ret str) {
  l_start l_end = str();
  il ir = gen_label();
  printf("jmp {}_end\n{}: db ", il, ir, il, ir);
  print_char(96);
  printf("{}", l_start, l_end);
  print_char(96);
  printf("\ndb 0\n{}_end: push {}\n", il, ir, il, ir);
  return ret 0
};

$print_aexp = (ret comb_args fname_l fname_r l r) {
  dig = deref_byte(l);
  res = is_alpha_ret(dig);
  {if {eq res 1} (break_o) {
    bool = {search_tree comb_args l r};
    {if bool (break) {
      {printf "push qword [{}{}]\n" fname_l fname_r l r};
      return ret 0
    }};
    break_o
  }};
  {if {eq {is_digit_ret dig} 1} (break) {
    {printf "push {}\n" l r};
    return ret 0
  }};
  {printf "push qword [{}]\n" l r};
  return ret 0
};

$read_cexp = (!orig_tokenizer) {
  assign, tokenizer = read_assignment(orig_tokenizer);
  {if eq(assign, 0) (break) { ! 0, orig_tokenizer }};
  cexp, tokenizer = read_cexp(tokenizer);
  ! (!) { ! assign, cexp }, tokenizer
};

$filter_context = (ret old_context ids) {
  context = map_tree(old_context, (!l r) {
    {if {search_tree ids l r} (break) { ! make_nil() }};
    ! {make_leaf l r}
  });
  return ret context
};

$merge_context = (ret old_context ids) {
  context = filter_context(old_context, ids);
  return ret {make_internal context ids}
};

$print_cexp = (ret fl fr context is_returning, gl, gr, cexp) {
  assign cexp = cexp();
  print_assignment(fl, fr, context, is_returning, gl, gr, assign);
  {if {eq cexp 0} (break) { return ret 0 }};
  assign_vars = get_assignment_vars(assign);
  print_cexp(fl, fr, merge_context(context, assign_vars), is_returning, gl, gr, cexp);
  return ret 0
};

$get_cexp_vars = (ret cexp) {
  assign cexp = cexp();
  ids = get_assignment_vars(assign);
  {if {eq cexp 0} (break) { return ret ids }};
  ids2 = get_cexp_vars(cexp);
  ids2 = filter_context(ids2, ids);
  return ret {make_internal ids ids2}
};

$read_eq_if = (ret need l r) {
  {if need (break) {
    l, r, t, tl, tr = {read_token l r};
    {if {not {matches "=" tl}} (break) { return 0 0 }};
    return ret l r
  }};
  return ret l r
};

$read_assign_left = (!orig_tokenizer) {
  orig_l, r = tokenizer_to_lr(orig_tokenizer);
  l = orig_l;
  ids, tokenizer = read_id_list(orig_tokenizer);
  l, r = tokenizer_to_lr(tokenizer);
  nl, nr, t, tl, tr = read_token(l, r);
  if(not(matches("=", tl)), (break) {
    il ir = gen_label();
    ! orig_l, r, make_leaf(il, ir)
  });
  ! nl, nr, ids
};

$read_assign_val = (!orig_tokenizer) {
  orig_l, r = tokenizer_to_lr(orig_tokenizer);
  l, r, ids = read_assign_left(orig_tokenizer);
  {if eq(0, l), (break) { ! 0, orig_tokenizer }};
  l r call_exp = read_call_expression(l, r);
  l r t tl tr = read_token(l, r);
  {if {not {matches ";" tl}}, (break) { ! 0, orig_tokenizer }};
  ! (!) { ! ids, call_exp }, make_tokenizer(l, r)
};

$assign_return = 1;
$assign_application = 2;
$assign_statement = 3;
$read_assignment = (!orig_tokenizer) {
  orig_l, r = tokenizer_to_lr(orig_tokenizer);
  token, tokenizer = orig_tokenizer();
  nl, nr = tokenizer_to_lr(tokenizer);
  if(token_matches("!", token), (break) {
    l r call_exps = read_call_exp_list(nl, nr);
    ! (!) { ! assign_return, (!) { ! call_exps } }, make_tokenizer(l, r)
  });
  assign, tokenizer = read_assign_val(orig_tokenizer);
  if(ne(assign, 0), (break) { ! (!) { ! assign_statement, assign }, tokenizer });
  l, r, cexp = read_function_application(orig_l, r);
  {if {eq cexp 0} (break) { ! 0, orig_tokenizer }};
  ! (!) { ! assign_application, (!) { ! cexp } }, make_tokenizer(l, r)
};

$print_assignment = (!fl, fr, context, is_returning, gl, gr, orig_assign) {
  assign_type, assign = orig_assign();
  if(eq(assign_type, assign_return) (break) {
    call_exps = assign();
    printf("mov rsp, [{}{}]\n", fl, fr, gl, gr);
    map_tree(reverse_tree(call_exps), (!call_exp r) {
      il, ir = gen_label();
      printf("jmp {}_end\n{}{}: dq 0\n{}_end:\n", il, ir, fl, fr, il, ir, il, ir);
      print_call_expression(fl, fr, context, make_leaf(il, ir), gl, gr, call_exp);
      printf("pop rax\npush qword [{}{}]\npush rax\n", fl, fr, il, ir);
    });
    printf("pop rcx\npop rax\njmp rcx\n");
    ! orig_assign
  });
  if (eq(assign_type, assign_statement), (break) {
    ids, call_exp = assign();
    print_call_expression(fl, fr, context, ids, gl, gr, call_exp);
    ! orig_assign
  });
  if (eq(assign_type, assign_application), (break) {
    appl = assign();
    print_function_application(fl, fr, context, is_returning, gl, gr, appl);
    ! orig_assign
  });
};

$assign_to_function = (!assign) {
  assign_type, assign = assign();
  if (eq(assign_type, assign_statement), (break) {
    ids, call_exp = assign();
    func = call_expression_to_function(call_exp);
    {if {eq func 0} (break) { ! 0 }};
    ! (!) { ! ids, func }
  });
  ! 0
};

$get_assignment_vars = (!assign) {
  assign_type, assign = assign();
  if (eq(assign_type, assign_statement), (break) {
    ids, call_exp = assign();
    ! ids
  });
  ! make_nil()
};

$read_call_exp_list = (ret l r) {
  l r tree = read_call_exp_list_help(l, r, make_nil());
  return ret l r tree
};

$read_call_exp_list_help = (ret l r tree) {
  nl nr t tl tr = read_token(l, r);
  {if {matches "," tl} (break) {
    read_call_exp_list_help ret nl nr tree
  }};
  l r call_exp = read_call_expression(l, r);
  {if {eq call_exp 0} (break) { return ret l r tree }};
  leaf = make_leaf(call_exp, 0);
  tree = make_internal(tree, leaf);
  read_call_exp_list_help ret l r tree
};

$read_texp_list = (ret l r) {
  l r tree = read_texp_list_help(l, r, make_nil());
  return ret l r tree
};

$read_texp_list_help = (ret l r tree) {
  nl nr t tl tr = read_token(l, r);
  {if {matches "," tl} (break) {
    read_texp_list_help ret nl nr tree
  }};
  l r texp = read_texp(l, r);
  {if {eq texp 0} (break) { return ret l r tree }};
  leaf = make_leaf(texp, 0);
  tree = make_internal(tree, leaf);
  read_texp_list_help ret l r tree
};

$print_call_exp_args = (ret, fl, fr, old_context, gl, gr, op_list) {
  map_tree(reverse_tree(op_list), (!call_exp r) {
    il, ir = gen_label();
    printf("jmp {}_end\n{}{}: dq 0\n{}_end:\n", il, ir, fl, fr, il, ir, il, ir);
    print_call_expression(fl, fr, old_context, make_leaf(il, ir), gl, gr, call_exp);
    printf("push qword [{}{}]\n", fl, fr, il, ir);
  });
  return ret 0
};

$read_call_expression_args = (ret orig_l r) {
  l = orig_l;
  nl nr t tl tr = read_token(l, r);
  {if not(matches("(", tl)) (break) { return(ret, orig_l, r, 0) }};
  l r op_list = read_call_exp_list(nl, nr);
  l r t tl tr = read_token(l, r);
  {if not(matches(")", tl)) (break2) { return(ret, orig_l, r, 0) }};
  nl nr t tl tr = read_token(l, r);
  {if {matches "{" tl} (break2) { return(ret, orig_l, r, 0)  }};
  return ret l r op_list
};

$read_call_expression = (ret orig_l r) {
  l = orig_l;
  l r texp = read_texp(l, r);
  {if {eq texp 0} (break) {
    return ret orig_l r 0
  }};
  l r op_list = read_call_expression_args(l, r);
  {if {eq op_list 0} (break) { return(ret, l, r, (t1, t2) { t1(texp) }) }};
  return ret l r (t1, t2) { t2(texp, op_list) }
};

$print_call_expression = (ret fl fr old_context ids, gl, gr, call_exp) {
  {if eq(call_exp, 0) (break) { return ret 0 }};
  call_exp
  (texp) {
    print_texp(fl, fr, old_context, ids, gl, gr, texp);
    return ret 0
  }
  (texp, op_list) {
    context = map_tree(old_context, (!l r) {
      {if search_tree(ids, l, r) (break) { ! make_nil() }};
      ! make_leaf(l, r)
    });
    map_tree(context, (!l r) { ! printf("push qword [{}{}]\n", fl, fr, l, r) });
    
    al ar = aexp_to_range(get_aexp_from_texp(texp));
    print_call_exp_args(fl, fr, old_context, gl, gr, op_list);
    if_else(or(eq(al, ar), search_tree(old_context, al, ar)), (break) {
      print_texp(fl, fr, old_context, make_nil(), gl, gr, texp);
      printf("call runtime_call_ret\n");
      break
    }
    (break) {
      printf("call {}\n", al, ar);
      break
    });

    rev_context = reverse_tree(context);
    printf("push rax\n");
    map_tree(ids, (!l r) { ! printf("pop qword [{}{}]\n", fl, fr, l, r) });
    map_tree(rev_context, (!l r) { ! printf("pop qword [{}{}]\n", fl, fr, l, r) });
    return ret 0
  }
};

$call_expression_to_function = (ret call_exp) {
  call_exp(
    (texp) {
      res = texp_to_function(texp);
      return ret res
    },
    (texp, op_list) {
      return ret 0
    }
  )
};

$read_func_appl_args = (ret l r) {
  nl nr op_list = read_call_expression_args(l, r);
  {if {ne op_list 0} (break) { return(ret, nl, nr, op_list) }};
  l r op_list = read_call_exp_list(l, r);
  return(ret, l, r, op_list)
};

$aexp_to_range = (!aexp) {
  if(eq(aexp, 0), (break) {
    ! 0, 0
  });
  l r = aexp();
  ! l, r
};

$read_function_application = (!orig_l r) {
  l = orig_l;
  l r texp = read_texp(l, r);
  if(eq(texp, 0), (break) {
    ! orig_l, r, 0
  });
  l r op_list = read_func_appl_args(l, r);
  ! l, r, (!) { ! op_list, texp }
};

$print_function_application = (!fl fr context is_returning, gl, gr, appl) {
  op_list, texp = appl();
  al, ar = aexp_to_range(get_aexp_from_texp(texp));
  print_call_exp_args(fl, fr, context, gl, gr, op_list);
  if_else(or(eq(al, ar), search_tree(context, al, ar)), (break) {
    print_texp(fl, fr, context, make_nil(), gl, gr, texp);
    if_else_ret(is_returning,
      (!) { ! printf("call runtime_call_ret\n") },
      (!) { ! printf("jmp runtime_call\n") },
    );
    break
  },
  (break) {
    if_else_ret(is_returning,
      (!) { ! printf("call {}\n", al, ar) },
      (!) { ! printf("jmp {}\n", al, ar) },
    );
    break
  });
};

$main_start = (ret, lo, hi) {
  printf("section .rwx progbits alloc exec write align=16\nglobal _start\n_start:\n");
  main_loop(make_nil(), lo, hi)
};

$main_loop = (context, l, r) {
  {if {eq} l r (break) { exit() }};
  c = deref_byte(l);
  {if {eq c {deref_byte "$"}} (break) {
    assign, tokenizer = read_assignment(make_tokenizer(add_func(l, 1), r));
    l, rr = tokenizer_to_lr(tokenizer);
    id_func = assign_to_function(assign);
    {if {eq id_func 0} (break) {
      ids = filter_context(get_assignment_vars(assign), context);
      map_tree(ids, (!l r) { ! printf("jmp {}_end\n{}: dq 0\n{}_end:\n", l, r, l, r, l, r)});
      print_assignment(0, 0, make_nil(), (a, b) { a }, 0, 0, assign);
      main_loop(make_internal(context, ids), l, r)
    }};
    {if {ne id_func 0} (break) {
      ids func = id_func();
      fname = first_leaf(ids);
      fname_l fname_r func_args is_returning cexp = func();
      fname(
        () { break },
        (l, r) {
          func = (!) { ! l, r, func_args, is_returning, cexp };
          {print_function, make_nil(), 0, 0, func};
          break()
        },
        (a, b) { break() }
      )
    }};
    main_loop(context, l, r)
  }};
  {if {eq c 59} (break) {
    l, r = read_until(deref_byte("\n"), l, r);
    main_loop(context, l, r)
  }};
  mid = add_func(l, 1);
  print_range(l, mid);
  main_loop(context, mid, r)
};

$inpf_name, outf_name = (!argc, argv1, inpf, outf) { ! inpf, outf }();
$inpf = sysc(2, inpf_name, 0, 65535, 0, 0, 0);
$outf = sysc(2, outf_name, 578, 65535, 0, 0, 0);
; get input size
$flen = (!) {
  buff = malloc_func(192);
  {sysc 5, inpf, buff, 0, 0, 0, 0};
  ! deref(add_func(buff, 48))
}();
; mmap input
$input = sysc(9, 0, flen, 3, 2, inpf, 0);
$flen = add_func(flen, input);
$buffer = malloc_func(4096);

$res = main_start(input, flen);

; eof
