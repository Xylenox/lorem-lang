jmp start

sysc:
    pop rcx

    pop rax
    pop rdi
    pop rsi
    pop rdx
    pop r10
    pop r8
    pop r9

    push rcx
    syscall
    ret

deref: ; takes (ptr) and returns *ptr
  pop rdx
  pop rax
  push rdx
  mov rax, [rax]
  ret

deref_byte: ; takes (ptr) and returns *ptr
  pop rdx
  pop rax
  push rdx
  mov al, [rax]
  and rax, 0xFF
  ret

return:
  pop rcx
  pop rax
  push rcx
  ret

add_func: ; takes (ret a b) and returns a+b
  pop rbx
  pop rax
  pop rcx
  push rbx
  add rax, rcx
  ret

div_func:
  pop rcx
  pop rax
  mov rdx, 0
  pop rdi
  idiv rdi
  jmp rcx

mul_func: ; UNSIGNED
  pop rcx
  pop rax
  pop rdx
  mul rdx
  jmp rcx

mod_func:
  pop rcx
  pop rax
  mov rdx, 0
  pop rdi
  idiv rdi
  mov rax, rdx
  jmp rcx

compare: ; takes in (a b equal_cont diff_cont) and calls equal_cont or diff_cont depending on a == b
  pop rax
  pop rcx
  pop rdi
  pop rsi
  cmp rax, rcx
  jne compare_fail
  push rdi
  jmp runtime_call

  compare_fail:
    push rsi
    jmp runtime_call

(or: ret cont1 cont2) {
  cont1, () { return ret cont1 }, () { return ret cont2 }
}

(if: ret v cont) {
  $break = () { return ret 0 };
  v, () { cont break }, break
}
(if_else: ret v cont1 cont2) {
  $break = () { return ret 0 };
  v, () { cont1 break }, () { cont2 break }
}
(if_ret: ret v cont) {
  $break = () { return ret 0 };
  v, () {
    ${cont};
    break
  },
  break
}
(if_else_ret: ret v cont1 cont2) {
  v, () { return ret {cont1} },
  () { return ret {cont2} }
}

(ne: ret a b) {
  compare(a, b, () { return ret (x y) {y} }, () { return ret (x y) {x} })
}
(not: ret x) {
  x(() { return ret (a b) {b} }, () { return ret (a b) {a} })
}

(eq: ret a b) {
  compare(a, b, () { return ret (x y) {x} }, () { return ret (x y) {y} })
}

exit:
  call flush_buffer
  mov rax, 60
  mov rdi, 0
  syscall
error:
  mov qword [outf], 2
  jmp error_help
(error_help: num) {
  ${printf "error {}\n" num {add_func num 10}};
  ${sysc 60 1 0 0 0 0 0};
  exit
}

runtime_call:
  ; first input is closure containing | number of operands including function, function, environment |
  mov rdx, [rsp]
  mov rcx, [rdx]
  shl rcx, 3
  add rdx, 8
  add rsp, 8
  sub rsp, rcx

  runtime_call_loop:
  sub rcx, 8
  mov rax, [rdx+rcx]
  mov [rsp+rcx], rax
  cmp rcx, 0
  jne runtime_call_loop
  
  pop rax
  jmp rax

runtime_call_ret:
  ; first input is closure containing | number of operands including function, function, environment |
  pop rbp
  mov rdx, [rsp]
  mov rcx, [rdx]
  shl rcx, 3
  add rdx, 8
  add rsp, 8
  sub rsp, rcx

  runtime_call_ret_loop:
  sub rcx, 8
  mov rax, [rdx+rcx]
  mov [rsp+rcx], rax
  cmp rcx, 0
  jne runtime_call_ret_loop
  
  pop rax
  push rbp
  jmp rax

page_pointer:
dq 0
memory_left:
dq 0
malloc:
  push rcx
  push rdx
  push rsi
  push rdi
  push r8
  push r9
  push r10
  push r11

  cmp [memory_left], rdi
  jl new_page
  jmp malloc_ret
  
  new_page:
  push rdi
  mov rsi, 4096
  mov rdi, 0               ; adress
  mov rdx, 3               ; PROT_READ | PROT_WRITE
  mov r10, 0x22           ; MAP_SHARED | MAP_ANONYMOUS
  mov r8, -1              ; file descriptor empty, anonymous
  mov r9, 0               ; offset
  mov rax, 9               ; mmap
  syscall
  pop rdi
  mov [page_pointer], rax
  mov qword [memory_left], 4096

  malloc_ret:
  mov rax, [page_pointer]
  add [page_pointer], rdi
  sub [memory_left], rdi

  pop r11
  pop r10
  pop r9
  pop r8
  pop rdi
  pop rsi
  pop rdx
  pop rcx
  ret
malloc_func:
  pop rax
  pop rdi
  push rax
  jmp malloc

(bool_true: cont_true cont_false) { cont_true }
(bool_false: cont_true cont_false) { cont_false }

(!make_nil:) { ! (cont_nil cont_leaf cont_internal) {cont_nil} }
(!make_leaf: l r) { ! (cont_nil cont_leaf cont_internal) {cont_leaf l r} }
(!make_internal: a b) { ! (cont_nil cont_leaf cont_internal) {cont_internal a b} }

scmp:
  cmp rdi, rsi
  je end_of_string
  cmp rdx, rcx
  je end_of_string

  sub rax, rax
  mov al, [rdi]
  push rbx
  sub rbx, rbx
  mov bl, [rdx]
  sub rax, rbx
  pop rbx
  add rdi, 1
  add rdx, 1
  cmp rax, 0
  je scmp
  jl less
  mov rax, 1
  ret
  less:
  mov rax, -1
  ret

  end_of_string:
  mov rax, 0
  cmp rdi, rsi
  jne not_first_shorter
  add rax, -1
  not_first_shorter:
  cmp rdx, rcx
  jne not_second_shorter
  add rax, 1
  not_second_shorter:
  ret

cur_label:
  dq 1
gen_label:
  mov rdi, 8
  call malloc
  mov rdx, rax
  mov rcx, [cur_label]
  add qword [cur_label], 1
  mov qword [rdx], "f"
  add rdx, 1
  gen_label_loop:
  mov rbx, rcx
  and rbx, 7
  add rbx, "0"
  mov [rdx], bl
  add rdx, 1
  shr rcx, 3
  cmp rcx, 0
  jne gen_label_loop
  pop rcx
  push rdx
  jmp rcx


str_cmp_func:
  pop rax
  pop rdi
  pop rsi
  pop rdx
  pop rcx
  push rax
  call scmp
  ret

(str_equal_func: ret a b l r) {
  $res = str_cmp_func(a, b, l, r);
  return ret {eq 0 res}
}
  
(print_range: ret a b) {
  ${if {eq a b} (break) { return ret 0 }};
  ${print_char {deref_byte a}};
  print_range ret {add_func a 1} b
}

buff_curr: dq 0
print_char:
  mov rax, [buffer]
  mov rdx, [buff_curr]
  mov rcx, [rsp+8]
  mov [rax+rdx], rcx
  add rdx, 1
  mov [buff_curr], rdx
  cmp rdx, 4096
  jne print_char_done
  call flush_buffer
  print_char_done:
  pop rax
  mov [rsp], rax
  ret
flush_buffer:
  mov rdx, [buff_curr]
  mov rsi, [buffer]
  mov rdi, [outf]
  mov rax, 1
  syscall
  mov qword [buff_curr], 0
  ret

(print_num_help: v cont) {
  ${if {eq v 0}, (break) { cont }};
  print_num_help {div_func v 10}, () {
    ${print_char {add_func {deref_byte "0"} {mod_func v 10}}};
    cont
  }
}
(print_num: ret v) { print_num_help(v, () { return ret 0 }) }

(printf: ret l) {
  $lb = {deref_byte l};
  ${if {eq lb 0}, (break) {
    return ret 0
  }};
  ${if {eq lb 123}, (break a b) {
    ${print_range a b};
    printf ret {add_func l 2}
  }};
  ${print_char {deref_byte l}};
  printf ret {add_func l 1}
}

(tree_size: ret tree) {
  tree,
  () { return ret 0 },
  (l r) { return ret 1 }
  (a b) {
    $a = [tree_size a];
    $b = [tree_size b];
    return ret {add_func a b}
  }
}

(map_tree: ret tree action) {
  tree,
  () { return ret {make_nil} },
  (l r) {
    $res = [action l r];
    return ret res
  },
  (a b) {
    $a = [map_tree a action];
    $b = [map_tree b action];
    return ret {make_internal a b}
  }
}

(first_leaf: ret tree) {
  tree(
    () { return ret {make_nil} },
    (l, r) { return ret {make_leaf l r} },
    (a, b) {
      $a_leaf = [first_leaf a];
      $b_leaf = [first_leaf b];
      a_leaf(
        () { return ret b_leaf },
        (l, r) { return ret a_leaf },
        (a, b) { return ret b_leaf }
      )
    }
  )
}

(map_tree_iota_help: ret n tree action) {
  tree,
    () {
      $nil = {make_nil};
      return ret n nil
    },
    (l r) {
      $res = action(n, l, r);
      $n = add_func(n, 1);
      return ret n res
    },
    (a b) {
      $n new_a = map_tree_iota_help(n, a, action);
      $n new_b = map_tree_iota_help(n, b, action);
      $res = make_internal(new_a, new_b);
      return ret n res
    }
}
(map_tree_iota: ret tree action) {
  $n t = map_tree_iota_help(0, tree, action);
  return ret t
}

(reverse_tree: ret tree) {
  tree, () { return ret {make_nil} } (l r -> return ret {make_leaf l r})
  (a b) {
    $a = [reverse_tree a];
    $b = [reverse_tree b];
    return ret {make_internal b a}
  }
}

(search_tree: ret tree l r) {
  tree(
    () { return ret (a, b) { b } },
    (a, b) {
      $res = str_equal_func(l, r, a, b);
      return ret res
    },
    (a, b) {
      $search_a = search_tree(a, l, r);
      ${if search_a (break) { return ret search_a }};
      $search_b = search_tree(b, l, r);
      return ret search_b
    }
  )
}

is_alpha:           ; is alpha
  cmp rdi, "a"      ; a
  jl nalp
  cmp rdi, "z"     ; z
  jg nalp
  yalp:
  mov rax, 1
  ret
  nalp:
  mov rax, 0
  ret

is_alpha_ret:
  pop rax
  pop rdi
  push rax
  call is_alpha
  ret

is_digit:           ; is alpha
  cmp rdi, "0"
  jl not_digit
  cmp rdi, "9"
  jg not_digit
  yes_digit:
  mov rax, 1
  ret
  not_digit:
  mov rax, 0
  ret

is_digit_ret:
  pop rax
  pop rdi
  push rax
  call is_digit
  ret

(read_whitespace: ret l r) {
  $lb = {deref_byte l};
  ${if {eq l r} (break) { return ret l r }};
  ${if {or {eq lb 10} {eq lb 32}} (break) {
    read_whitespace ret {add_func l 1} r
  }};
  return ret l r
}

read_identifier:
  pop rcx
  pop r8
  pop qword [flen]
  push rcx
  push qword [flen]
  push r8
  call read_whitespace
  mov r8, rax
  pop qword [flen]
  push r8
  irloo:
  sub rcx, rcx
  mov cl, [r8]
  mov rdi, rcx
  call is_alpha
  cmp rax, 1
  je identifier_ret_loop_continue
  call is_digit
  cmp rax, 1
  je identifier_ret_loop_continue
  cmp rcx, "_"
  je identifier_ret_loop_continue
  jmp irdon
  identifier_ret_loop_continue:
  add r8, 1
  jmp irloo
  irdon:
  pop rax
  mov rdx, r8
  pop rcx
  push rdx
  push rax
  push qword [flen]
  mov rax, r8
  jmp rcx

(!eof_closure_map_arg: fname_l fname_r pfname_l pfname_r) {
  ! (!n l r) {
    ${if_else_ret {eq l fname_l} (!) {
      ${printf "mov qword [rax+"};
      ${print_num {mul_func 8 {add_func 1 n}}};
      ${printf "], {}\n" l r};
     }, (!) {
      ${printf "mov rcx, [{}{}]\nmov qword [rax+" pfname_l pfname_r l r};
      ${print_num {mul_func 8 {add_func 1 n}}};
      ${printf "], rcx\n"};
    }};
  }
}

(matches: ret a b) {
  ${if {eq {deref_byte a} 0} (break -> return ret (a b -> a))};
  ${if {ne {deref_byte a} {deref_byte b}} (break -> return ret (a b -> b))};
  matches ret {add_func a 1} {add_func b 1}
}
; 0 -> special, 1 -> id, 2 -> number, 3 -> string, 4 -> comment, 5 -> newline, 6 -> eof
; returns l r type il ir
(read_token: ret l r ->
  $l r = {read_whitespace l r};
  ${if {eq 34 {deref_byte l}} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "$" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "!" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "[" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "]" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "(" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches ")" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "{" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "}" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "=" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches ";" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches ":" l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "," l} (break -> return ret {add_func l 1} r 0 l {add_func l 1})};
  ${if {matches "->" l} (break -> return ret {add_func l 2} r 0 l {add_func l 2})};
  $l r il ir = {read_identifier l r};
  ${if {ne il ir} (break -> return ret l r 1 il ir)};
  error l
)

(read_is_returning: ret l r) {
  $nl nr t tl tr = {read_token l r};
  ${if {matches "!" tl} (break) {
    return ret nl nr (a b -> a)
  }};
  return ret l r (a b -> b)
}
(read_label: ret pl pr) {
  $l r t fl fr = {read_token pl pr};
  ${if {ne t 1} (break -> 
    $fl fr = {gen_label};
    return ret pl pr fl fr
  )};
  $l r t tl tr = {read_token l r};
  ${if {matches ":" tl} (break ->
    return ret l r fl fr
  )};
  $fl fr = {gen_label};
  return ret pl pr fl fr
}
(read_id_list: ret l r) {
  $l r tree = read_id_list_help(l, r, {make_nil});
  return ret l r tree
}
(read_id_list_help: ret l r tree) {
  $nl nr t tl tr = [read_token l r];
  ${if {matches "," tl} (break) {
    read_id_list_help ret nl nr tree
  }};
  $l r il ir = read_identifier(l, r);
  ${if {eq il ir} (break) { return ret l r tree }};
  $leaf = {make_leaf il ir};
  $tree = {make_internal tree leaf};
  read_id_list_help ret l r tree
}

(read_function: ret orig_l r) {
  $l = orig_l;
  $l r t tl tr = read_token(l, r);
  ${if {not {matches "(" tl}} (break -> return ret orig_l r 0)};
  $l r is_returning = {read_is_returning l r};
  $l r fname_l fname_r = {read_label l r}; 
  $l r new_args = {read_id_list l r}; 
  $l r t tl tr = {read_token l r};
  ${if {matches ")" tl} (break) {
    $l r t tl tr = {read_token l r};
    ${if {not {matches "{" tl}} (break) { return ret orig_l r 0 }};
    $l r cexp = read_cexp(l, r);
    $l r t tl tr = read_token(l, r);
    ${if {not {matches "}" tl}} (break) { return ret orig_l r 0 }};
    return ret l r (!) { ! fname_l fname_r new_args is_returning cexp }
  }};
  ${if {not {matches "->" tl}} (break -> return ret orig_l r 0)};
  $l r cexp = read_cexp(l, r);
  $l r t tl tr = read_token(l, r);
  ${if {not {matches ")" tl}} (break) { return ret orig_l r 0 }};
  return ret l r (!) { ! fname_l fname_r new_args is_returning cexp }
}
(print_function: ret old_context func) {
  $fname_l fname_r func_args is_returning cexp = {func};
  $new_context = merge_context(old_context, func_args);
  $cids = get_cexp_vars(cexp);
  $cids = filter_context(cids, new_context);
  ${printf "jmp {}_end\n" fname_l fname_r};
  ${map_tree {make_internal new_context cids} (!l r) { ${printf "{}{}: dq 0\n" fname_l fname_r l r}; }};
  ${printf "{}:\n" fname_l fname_r};
  ${if_ret is_returning (!) { ${printf "pop rax\n"}; }};
  ${map_tree new_context (!l r) { ${printf "pop qword [{}{}]\n" fname_l fname_r l r}; }};
  ${if_ret is_returning (!) { ${printf "push rax\n"}; }};
  $[print_cexp fname_l fname_r new_context is_returning cexp];
  ${if_ret is_returning (!) { ${printf "ret\n"}; }};
  ${printf "{}_end:\n" fname_l fname_r};
  return ret 0
}

(get_aexp_from_texp: ret texp) {
  $none = (a) { return ret 0 };
  ${if {eq texp 0} (break) { return ret 0}};
  texp(none, (aexp) { return ret aexp }, none, none, none)
}

; returns l r texp
(read_texp: ret orig_l r) {
  $l = orig_l;
  $return_string =     (l r t) { return ret l, r, (x aexp rec_block block func) { x t } };
  $return_rec_block = (l r rb) { return ret l, r, (x aexp rec_block block func) { rec_block rb } };
  $return_block =      (l r b) { return ret l, r, (x aexp rec_block block func) { block b } };
  $return_func =       (l r f) { return ret l, r, (x aexp rec_block block func) { func f } };
  $return_aexp =       (l r a) { return ret l, r, (x aexp rec_block block func) { aexp a } };
  $nl, nr, t, tl, tr = read_token(l, r);
  ${if {eq t 1} (break) { return_aexp(nl, nr, (!) { ! tl tr }) }};
  ${if {matches("[", tl)} (break) {
    $l, r, cexp = read_cexp(nl, nr);
    $l, r, t, tl, tr = read_token(l, r);
    ${if {not {matches "]" tl}} (break2) { break }};
    return_rec_block(l, r, (!) { ! cexp })
  }};
  ${if {matches("{", tl)} (break) {
    $l, r, cexp = read_cexp(nl, nr);
    $l, r, t, tl, tr = read_token(l, r);
    ${if {not {matches "}" tl}} (break2) { break }};
    return_block(l, r, (!) { ! cexp })
  }};
  $lo, hi, func = read_function(l, r);
  ${if {ne func 0} (break) {
    return_func(lo, hi, (!) { ! func })
  }};
  $lo, hi, string = read_const_string(l, r);
  ${if {ne string 0} (break) {
    return_string(lo, hi, string)
  }};
  return ret orig_l, r, 0
}

(print_texp: ret fl fr old_context ids texp) {
  ${if {eq texp 0} (break -> return ret 0)};
  texp
  (string) {
    ${print_const_string string};
    ${map_tree ids (!l r) { ${printf "pop qword [{}{}]\n" fl fr l r}; }};
    return ret 0
  }
  (aexp) {
    $a, b = aexp();
    $[print_aexp old_context fl fr a b];
    ${map_tree ids (!l r) { ${printf "pop qword [{}{}]\n" fl fr l r}; }};
    return ret 0
  }
  (rec_block) {
    $cexp = {rec_block};
    $context = {map_tree old_context (!l r) {
      ${if {search_tree ids l r} (break) { ! {make_nil} }};
      ! {make_leaf l r}
    }};
    ${map_tree context (!l r) { ${printf "push qword [{}{}]\n" fl fr l r}; }};
    $[print_cexp fl fr old_context (a b) { a } cexp];
    $rev_context = [reverse_tree context];
    $[printf "push rax\n"];
    ${map_tree ids (!l r -> ${printf "pop qword [{}{}]\n" fl fr l r};)};
    ${map_tree rev_context (!l r -> ${printf "pop qword [{}{}]\n" fl fr l r};)};
    return ret 0
  }
  (block) {
    $cexp = {block};
    $[print_cexp fl fr old_context (a b) { a } cexp];
    $[printf "push rax\n"];
    ${map_tree ids (!l r -> ${printf "pop qword [{}{}]\n" fl fr l r};)};
    return ret 0
  }
  (f) {
    $func = {f}; 
    $fname_l fname_r func_args is_returning cexp = {func};
    $old_context = filter_context(old_context, func_args);
    $[print_function old_context func];
    $context = {make_internal {make_leaf fname_l fname_r} old_context};
    ${printf "mov rdi, "};
    $size = {tree_size context};
    ${print_num {mul_func 8 {add_func 1 size}}};
    ${printf "\ncall malloc\n"};
    $map_arg = {eof_closure_map_arg fname_l fname_r fl fr};
    ${map_tree_iota context map_arg};
    ${printf "mov qword [rax], "};
    ${print_num size};
    ${printf "\n"};
    ${printf "push rax\n"};
    ${map_tree ids (!l r) { ${printf "pop qword [{}{}]\n" fl fr l r}; }};
    return ret 0
  }
}

(texp_to_function: ret texp) {
  texp(
    (string) { return ret 0 },
    (aexp) { return ret 0 },
    (rec_block) { return ret 0 },
    (block) { return ret 0 },
    (f) {
      $func = {f};
      return ret func
    }
  )
}

(read_until: ret c l r) {
  $lb = {deref_byte l};
  ${if {eq lb c} (break) { return ret l r }};
  read_until ret c {add_func l 1} r
}

(read_const_string: ret orig_l r) {
  $l r = {read_whitespace orig_l r};
  $lb = {deref_byte l};
  ${if {ne lb 34} (break) { return ret orig_l r 0 }};
  $l_start = {add_func l 1};
  $l_end r = {read_until 34 l_start r};
  $l = {add_func l_end 1};
  return ret l r (!) { ! l_start l_end }
}
(print_const_string: ret str) {
  $l_start l_end = {str};
  $il ir = {gen_label};
  ${printf "jmp {}_end\n{}: db " il ir il ir};
  ${print_char 96};
  ${printf "{}" l_start l_end};
  ${print_char 96};
  ${printf "\ndb 0\n{}_end: push {}\n" il ir il ir};
  return ret 0
}

(print_aexp: ret comb_args fname_l fname_r l r) {
  $dig = {deref_byte l};
  $res = {is_alpha_ret dig};
  ${if {eq res 1} (break_o) {
    $bool = {search_tree comb_args l r};
    ${if bool (break) {
      ${printf "push qword [{}{}]\n" fname_l fname_r l r};
      return ret 0
    }};
    break_o
  }};
  ${if {eq {is_digit_ret dig} 1} (break) {
    ${printf "push {}\n" l r};
    return ret 0
  }};
  ${printf "push qword [{}]\n" l r};
  return ret 0
}

; returns l r cexp
(read_cexp: ret orig_l r) {
  $l = orig_l;
  $l r assign = [read_assignment orig_l r];
  ${if {eq assign 0} (break -> return ret l r 0)};
  $l r cexp = [read_cexp l r];
  return ret l r (!) { ! assign cexp }
}

(filter_context: ret old_context ids) {
  $context = map_tree(old_context, (!l r) {
    ${if {search_tree ids l r} (break) { ! {make_nil} }};
    ! {make_leaf l r}
  });
  return ret context
}

(merge_context: ret old_context ids) {
  $context = filter_context(old_context, ids);
  return ret {make_internal context ids}
}

(print_cexp: ret fl fr context is_returning cexp) {
  $assign cexp = {cexp};
  $[print_assignment fl fr context is_returning assign];
  ${if {eq cexp 0} (break) { return ret 0 }};
  $assign_vars = get_assignment_vars(assign);
  $[print_cexp fl fr {merge_context context assign_vars} is_returning cexp];
  return ret 0
}

(get_cexp_vars: ret cexp) {
  $assign cexp = {cexp};
  $ids = get_assignment_vars(assign);
  ${if {eq cexp 0} (break) { return ret ids }};
  $ids2 = get_cexp_vars(cexp);
  $ids2 = filter_context(ids2, ids);
  return ret {make_internal ids ids2}
}

(read_eq_if: ret need l r) {
  ${if need (break ->
    $l r t tl tr = {read_token l r};
    ${if {not {matches "=" tl}} (break) { return 0 0 }};
    return ret l r
  )};
  return ret l r
}

(read_assignment: ret orig_l r) {
  $l = orig_l;
  $l r t tl tr = {read_token l r};
  ${if {matches "!" tl} (break) {
    $l r call_exps = read_call_exp_list(l, r);
    return ret l r (a b c) { c(call_exps) }
  }};
  ${if {not {matches "$" tl}} (break) {
    $l r cexp = read_function_application(orig_l, r);
    ${if {eq cexp 0} (break) { return ret l r 0 }};
    return ret l r, (a b c) { a(cexp) }
  }};
  $l r ids = {read_id_list l r};
  $is_empty_ids = {eq {tree_size ids} 0};
  $ids = {if_else_ret is_empty_ids, (!) {
    $il ir = gen_label();
    ! make_leaf(il, ir)
  },
  (!) { ! ids }};
  $l r = read_eq_if(not(is_empty_ids), l, r);
  ${if {eq 0 l}, (break) { return(ret, orig_l, r, 0) }};
  $l r call_exp = read_call_expression(l, r);
  $l r t tl tr = read_token(l, r);
  ${if {not {matches ";" tl}}, (break) { return(ret, orig_l, r, 0) }};
  return(ret, l, r, (a b c) { b(ids, call_exp) })
}
(print_assignment: ret fl fr context is_returning assign) {
  assign, (appl) {
    $[print_function_application(fl, fr, context, is_returning, appl)];
    return(ret, 0)
  },
  (ids call_exp) {
    $[print_call_expression(fl, fr, context, ids, call_exp)];
    return(ret, 0)
  },
  (call_exps) {
    $[map_tree({reverse_tree call_exps}, (!call_exp r) {
      $il, ir = gen_label();
      ${printf("jmp {}_end\n{}{}: dq 0\n{}_end:\n", il, ir, fl, fr, il, ir, il, ir)};
      $[print_call_expression(fl, fr, context, {make_leaf(il, ir)}, call_exp)];
      ${printf("pop rax\npush qword [{}{}]\npush rax\n", fl, fr, il, ir)};
    })];
    ${printf("pop rcx\npop rax\njmp rcx\n")};
    return(ret, 0)
  }
}

(assign_to_function: ret, assign) {
  assign(
    (appl) { return ret 0 },
    (ids, call_exp) {
      $func = call_expression_to_function(call_exp);
      ${if {eq func 0} (break) { return ret 0 }};
      return ret (!) { ! ids, func }
    },
    (call_exps) { return ret 0 }
  )
}

(get_assignment_vars: ret assign) {
  assign, (appl) { return ret {make_nil} },
  (ids call_exp) { return ret ids },
  (call_exps) { return ret {make_nil} }
}

(read_call_exp_list: ret l r) {
  $l r tree = read_call_exp_list_help(l, r, {make_nil});
  return ret l r tree
}
(read_call_exp_list_help: ret l r tree) {
  $nl nr t tl tr = read_token(l, r);
  ${if {matches "," tl} (break) {
    read_call_exp_list_help ret nl nr tree
  }};
  $l r call_exp = read_call_expression(l, r);
  ${if {eq call_exp 0} (break) { return ret l r tree }};
  $leaf = make_leaf(call_exp, 0);
  $tree = make_internal(tree, leaf);
  read_call_exp_list_help ret l r tree
}
(read_texp_list: ret l r) {
  $l r tree = read_texp_list_help(l, r, {make_nil});
  return ret l r tree
}
(read_texp_list_help: ret l r tree) {
  $nl nr t tl tr = [read_token l r];
  ${if {matches "," tl} (break) {
    read_texp_list_help ret nl nr tree
  }};
  $l r texp = read_texp(l, r);
  ${if {eq texp 0} (break) { return ret l r tree }};
  $leaf = {make_leaf texp 0};
  $tree = {make_internal tree leaf};
  read_texp_list_help ret l r tree
}

(read_call_expression_args: ret l r) {
  $nl nr t tl tr = read_token(l, r);
  ${if {matches "(" tl} (break) {
    $l r op_list = read_texp_list(nl, nr);
    $l r t tl tr = read_token(l, r);
    ${if {not {matches ")" tl}} (break2) { break }};
    $nl nr t tl tr = read_token(l, r);
    ${if {matches "{" tl} (break2) { break }};
    return ret l r op_list
  }};
  return(ret, l, r, 0)
}

$print_call_exp_args = (ret, fl, fr, old_context, op_list) {
  $[map_tree {reverse_tree op_list} (!call_exp r) {
    $il, ir = gen_label();
    ${printf("jmp {}_end\n{}{}: dq 0\n{}_end:\n", il, ir, fl, fr, il, ir, il, ir)};
    $[print_call_expression(fl, fr, old_context, {make_leaf il ir}, call_exp)];
    ! printf("push qword [{}{}]\n", fl, fr, il, ir)
  }];
  return ret 0
};

(read_call_expression_args_with_cexp: ret orig_l r) {
  $l = orig_l;
  $nl nr t tl tr = read_token(l, r);
  ${if {not({matches "(" tl})} (break) { return(ret, orig_l, r, 0) }};
  $l r op_list = read_call_exp_list(nl, nr);
  $l r t tl tr = read_token(l, r);
  ${if {not {matches ")" tl}} (break2) { return(ret, orig_l, r, 0)  }};
  $nl nr t tl tr = read_token(l, r);
  ${if {matches "{" tl} (break2) { return(ret, orig_l, r, 0)  }};
  return ret l r op_list
}

(read_call_expression: ret orig_l r) {
  $l = orig_l;
  $l r texp = read_texp(l, r);
  ${if {eq texp 0} (break) {
    return ret orig_l r 0
  }};
  $l r op_list = read_call_expression_args_with_cexp(l, r);
  ${if {eq op_list 0} (break) { return(ret, l, r, (t1, t2) { t1(texp) }) }};
  return ret l r (t1, t2) { t2(texp, op_list) }
}

$print_call_expression = (ret fl fr old_context ids call_exp) {
  ${if {eq call_exp 0} (break) { return ret 0 }};
  call_exp
  (texp) {
    $[print_texp fl fr old_context ids texp];
    return ret 0
  }
  (texp, op_list) {
    $context = [map_tree old_context (!l r) {
      ${if {search_tree ids l r} (break) { ! {make_nil} }};
      ! {make_leaf l r}
    }];
    $[map_tree context (!l r) { ! printf("push qword [{}{}]\n", fl, fr, l, r) }];
    
    $al ar = aexp_to_range({get_aexp_from_texp texp});
    $[print_call_exp_args(fl, fr, old_context, op_list)];
    $[if_else {or {eq al ar} {search_tree old_context al ar}} (break) {
      $[print_texp fl fr old_context {make_nil} texp];
      ${printf "call runtime_call_ret\n"};
      break
    }
    (break) {
      ${printf "call {}\n" al ar};
      break
    }];

    $rev_context = reverse_tree(context);
    $[printf "push rax\n"];
    ${map_tree ids (!l r) { ! printf("pop qword [{}{}]\n", fl, fr, l, r) }};
    ${map_tree rev_context (!l r) { ! printf("pop qword [{}{}]\n", fl, fr, l, r) }};
    return ret 0
  }
};

(call_expression_to_function: ret call_exp) {
  call_exp(
    (texp) {
      $res = texp_to_function(texp);
      return ret res
    },
    (texp, op_list) {
      return ret 0
    }
  )
}

(read_func_appl_args: ret l r) {
  $nl nr op_list = read_call_expression_args_with_cexp(l, r);
  ${if {ne op_list 0} (break) { return(ret, nl, nr, op_list) }};
  $l r op_list = read_call_exp_list(l, r);
  return(ret, l, r, op_list)
}

(aexp_to_range: ret aexp) {
  ${if({eq(aexp, 0)}, (break) {
    return(ret, 0, 0)
  })};
  $l r = aexp();
  return(ret, l, r)
}

(read_function_application: ret orig_l r) {
  $l = orig_l;
  $l r texp = read_texp(l, r);
  ${if({eq(texp, 0)}, (break) {
    return(ret, orig_l, r, 0)
  })};
  $l r op_list = read_func_appl_args(l, r);
  return(ret, l, r, (!) { ! op_list, texp })
}
(print_function_application: ret fl fr context is_returning appl) {
  $op_list, texp = appl();
  $al, ar = aexp_to_range(get_aexp_from_texp(texp));
  $[print_call_exp_args(fl, fr, context, op_list)];
  ${if_else {or {eq(al, ar)} {search_tree context al ar}} (break) {
    $[print_texp(fl, fr, context, {make_nil()}, texp)];
    ${if_else_ret(is_returning,
      (!) { ! printf("call runtime_call_ret\n") },
      (!) { ! printf("jmp runtime_call\n") },
    )};
    break
  }
  (break) {
    ${if_else_ret(is_returning,
      (!) { ! printf("call {}\n", al, ar) },
      (!) { ! printf("jmp {}\n", al, ar) },
    )};
    break
  }};
  return(ret, 0)
}

$main_start = (ret, lo, hi) {
  ${printf "section .rwx progbits alloc exec write align=16\nglobal _start\n_start:\n"};
  main_loop(lo, hi)
};

$main_loop = (l r) {
  ${if {eq} l r (break) { exit() }};
  $c = {deref_byte l};
  ${if {eq c 40} (break) { 
    $l r func = read_function(l, r);
    ${print_function {make_nil} func};
    main_loop(l, r)
  }};
  ${if {eq c {deref_byte "$"}} (break) {
    $l, r, assign = read_assignment(l, r);
    $id_func = assign_to_function(assign);
    ${if {eq id_func 0} (break) {
      $ids = get_assignment_vars(assign);
      ${map_tree ids (!l r) { ! printf("jmp {}_end\n{}: dq 0\n{}_end:\n", l, r, l, r, l, r)}};
      ${print_assignment(0, 0, {make_nil}, (a, b) { a }, assign)};
      break
    }};
    ${if {ne id_func 0} (break) {
      $ids func = id_func();
      $fname = {first_leaf ids};
      $fname_l fname_r func_args is_returning cexp = {func};
      fname(
        () { break },
        (l, r) {
          $func = (!) { ! l, r, func_args, is_returning, cexp };
          ${print_function {make_nil} func};
          break
        },
        (a, b) { break }
      )
    }};
    main_loop(l, r)
  }};
  ${if {eq c 59} (break) {
    $l, r = read_until({deref_byte "\n"}, l, r);
    main_loop(l, r)
  }};
  $mid = add_func(l, 1);
  ${print_range l mid};
  main_loop(mid, r)
};

start:
$inpf_name, outf_name = (!argc, argv1, inpf, outf) { ! inpf, outf }();
$inpf = sysc(2, inpf_name, 0, 65535, 0, 0, 0);
$outf = sysc(2, outf_name, 578, 65535, 0, 0, 0);
; get input size
$flen = (!) {
  $buff = malloc_func(192);
  ${sysc 5, inpf, buff, 0, 0, 0, 0};
  ! {deref {add_func(buff, 48)}}
}();
; mmap input
$input = sysc(9, 0, flen, 3, 2, inpf, 0);
mov r8, [input]
add [flen], r8
$buffer = malloc_func(4096);

$res = main_start(input, flen);
