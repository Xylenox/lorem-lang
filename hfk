; register layout
; ----------------
; r4 = pointer to input
; r9 = output file descriptor
; r10 = characters remaining in input
;
jmp start

constant_strings:
push_string:
dq "push "
jmp_string:
dq "jmp "

inpf: dq 0
outf: dq 0
flen: dq 0
iter: dq 0
ofar: dq 0  ; offset array

exit:
    mov r0, 60
    mov r7, 0
    syscall

malloc:
push rcx
push rdx
push rsi
push rdi
push r8
push r9
push r10
push r11

mov rsi, rdi
mov rdi, 0               ; adress
mov rdx, 3               ; PROT_READ \| PROT_WRITE
mov r10, 0x22           ; MAP_SHARED \| MAP_ANONYMOUS
mov r8, -1              ; file descriptor empty, anonymous
mov r9, 0               ; offset
mov rax, 9               ; mmap
syscall

pop r11
pop r10
pop r9
pop r8
pop rdi
pop rsi
pop rdx
pop rcx
ret

prin:                   ; printst
push rax
push rcx
push rdx
push rsi
push rdi
push r11
mov rdx, rdi
mov rdi, [outf]
mov rsi, r4
add rsi, 56
mov rax, 1
syscall
pop r11
pop rdi
pop rsi
pop rdx
pop rcx
pop rax
ret

print_range: ; FOLLOWS SYSTEM V ABI
    ; prints [rdi, rsi) to outf
    mov rdx, rsi        ; length of print
    sub rdx, rdi
    mov rsi, rdi ; rsi already stores buffer lcoation
    mov rdi, [outf]
    mov rax, 1
    syscall
    ret


print_range_line:
    call print_range
    push 10
    mov rdi, 1
    call prin
    add rsp, 8
    ret

is_alpha:           ; is alpha
cmp r7, "a"      ; a
jl nalp
cmp r7, "z"     ; z
jg nalp
yalp:
mov r0, 1
ret
nalp:
mov r0, 0
ret

is_digit:           ; is alpha
cmp r7, "0"
jl not_digit
cmp r7, "9"
jg not_digit
yes_digit:
mov r0, 1
ret
not_digit:
mov r0, 0
ret

read_whitespace:
    cmp r8, [flen]
    je done_whitespace
    cmpb [r8], " "
    je not_done_whitespace
    cmpb [r8], 10
    je not_done_whitespace
    done_whitespace:
    ret
    not_done_whitespace:
    add r8, 1
    jmp read_whitespace

read_identifier: ; read identifier and return start and end pointers
    ; call read_whitespace
    push r8
    iloo:
    sub rcx, rcx
    movb cl, [r8]
    mov rdi, rcx
    call is_alpha
    cmp rax, 1
    je identifier_loop_continue
    call is_digit
    cmp rax, 1
    je identifier_loop_continue
    cmp rcx, "_"
    je identifier_loop_continue
    jmp idon
    identifier_loop_continue:
    add r8, 1
    jmp iloo
    idon:
    pop rax
    mov rdx, r8
    ret

argument_buffer_begin:
dq 0
argument_buffer_end:
dq 0

start:
; open input
mov r6, 0x0             ; READ_ONLY
mov r2, 0xFFFF          ; all perms
mov r7, [rsp+16]            ; argv[1]
mov r0, 2
syscall
mov r8, r0              ; save input file descriptor
; open output
mov r0, 2               ; fopen
mov r6, 0x242           ; truncate/create/READ_WRITE
mov r2, 0xFFFF          ; all perms
mov r7, [rsp+24]            ; argv[2]
syscall
mov [outf], r0
; get input size
sub rsp, 0xC0            ; fstat size
mov r7, r8              ; input file descriptor
mov r6, rsp              ; fstat buffer
mov r0, 5               ; fstat
syscall
mov r10, [rsp+48]            ; file size
mov [flen], r10

; mmap input
mov r0, 9               ; mmap
mov r7, 0               ; address
mov r6, [flen]              ; length
mov r2, 3               ; PROT_READ \| PROT_WRITE
mov r10, 2              ; MAP_PRIVATE
mov r9, 0               ; offset
syscall

mov r8, r0              ; save mmap address

; make heap
mov r7, 0               ; adress
mov r6, [flen]             ; length
shl r6, 8               ; 64 * file size, should be good

mov r2, 3               ; PROT_READ \| PROT_WRITE
mov r10, 0x22           ; MAP_SHARED \| MAP_ANONYMOUS
push r8                 ; save r8
mov r8, -1              ; file descriptor empty, anonymous
mov r9, 0               ; offset
mov r0, 9               ; mmap
syscall
pop r8                  ; restore r8
mov r14, r0             ; save instruction location array end
mov [argument_buffer_begin], rax
mov [argument_buffer_end], rax
mov r15, [flen]            ; store max length of instruction location array
shl r15, 4              ; 16 * file size

mov [iter], 2
push r14
push r8

add [flen], r8

main:
    ; main loop
    cmp r8, [flen]
    je exit
    cmpb [r8], "\|"
    jne not_function
    add r8, 1
    
    jmp function_header_end
    function_header:
    dq "mov rdi,"
    dq " 80"
    
    dq "call mal"
    dq "loc"
    
    dq "mov rdx,"
    dq " rax"
    function_header_end:
    lea rdi, [function_header]
    lea rsi, [function_header+11]
    call print_range_line
    lea rdi, [function_header+16]
    lea rsi, [function_header+27]
    call print_range_line
    lea rdi, [function_header+32]
    lea rsi, [function_header+44]
    call print_range_line

    mov rax, [argument_buffer_begin]
    mov [argument_buffer_end], rax

    function_loop:
    call read_whitespace
    cmpb [r8], "\|"
    je function_loop_done
    call read_identifier
    mov rcx, [argument_buffer_end]

    jmp suff_strings_end
    mov_string:
    dq "mov rcx,"
    dq " "
    mov_string_end:
    suff_strings:
    dq "mov [rdx"
    dq "], rcx"
    dq "add rdx,"
    dq " 8"
    suff_strings_end:
    mov [rcx], rax
    mov [rcx+8], rdx
    lea rdi, [mov_string]
    lea rsi, [mov_string+9]
    call print_range
    mov rax, [argument_buffer_end]
    mov rdi, [rax]
    mov rsi, [rax+8]
    call print_range_line
    lea rdi, [suff_strings]
    lea rsi, [suff_strings+14]
    call print_range_line
    lea rdi, [suff_strings+16]
    lea rsi, [suff_strings+26]
    call print_range_line

    add [argument_buffer_end], 16
    jmp function_loop

    function_loop_done:

    add r8, 1
    jmp main
    
    not_function:
    
    cmpb [r8], "\\"
    jne not_escape
    add r8, 1
    not_escape:

    
    push [r8]
    mov rdi, 1
    call prin
    pop rax
    add r8, 1
    jmp main    

inva:
; invalid
sub r4, 24
mov [r4], "inva"
mov [r4+4], "lid "
mov [r4+8], "inst"
mov [r4+12], "ruct"
mov [r4+16], "ion"
mov [r4+20], 10

mov r7, 21
mov [outf], 0
call prin

add r4, 24

call exit
mov r0, r0
