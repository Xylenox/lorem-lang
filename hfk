; register layout
; ----------------
; r4 = pointer to input
; r9 = output file descriptor
; r10 = characters remaining in input
;
(start)

constant_strings:
push_string:
dq "push "
jmp_string:
dq "jmp "

inpf: dq 0
outf: dq 0
flen: dq 0
iter: dq 0
ofar: dq 0  ; offset array

exit:
    mov r0, 60
    mov r7, 0
    syscall

prin:                   ; printst
push r0
push r1
push rdx
push r6
push rdi
push r11
mov rdx, rdi
mov rdi, [outf]
mov r6, r4
add r6, 56
mov r0, 1
syscall
pop r11
pop rdi
pop r6
pop rdx
pop r1
pop r0
ret

start:
; open input
mov r6, 0x0             ; READ_ONLY
mov r2, 0xFFFF          ; all perms
mov r7, [rsp+16]            ; argv[1]
mov r0, 2
syscall
mov r8, r0              ; save input file descriptor
; open output
mov r0, 2               ; fopen
mov r6, 0x242           ; truncate/create/READ_WRITE
mov r2, 0xFFFF          ; all perms
mov r7, [rsp+24]            ; argv[2]
syscall
mov [outf], r0
; get input size
sub rsp, 0xC0            ; fstat size
mov r7, r8              ; input file descriptor
mov r6, rsp              ; fstat buffer
mov r0, 5               ; fstat
syscall
mov r10, [rsp+48]            ; file size
mov [flen], r10

; mmap input
mov r0, 9               ; mmap
mov r7, 0               ; address
mov r6, [flen]              ; length
mov r2, 3               ; PROT_READ | PROT_WRITE
mov r10, 2              ; MAP_PRIVATE
mov r9, 0               ; offset
syscall

mov r8, r0              ; save mmap address

; make heap
mov r7, 0               ; adress
mov r6, [flen]             ; length
shl r6, 8               ; 64 * file size, should be good

mov r2, 3               ; PROT_READ | PROT_WRITE
mov r10, 0x22           ; MAP_SHARED | MAP_ANONYMOUS
push r8                 ; save r8
mov r8, -1              ; file descriptor empty, anonymous
mov r9, 0               ; offset
mov r0, 9               ; mmap
syscall
pop r8                  ; restore r8
mov r14, r0             ; save instruction location array end
mov [ofar], rax
mov r15, [flen]            ; store max length of instruction location array
shl r15, 4              ; 16 * file size

mov [iter], 2
push r14
push r8

add [flen], r8

main:
    ; main loop
    cmp r8, [flen]
    je exit
    cmpb [r8], "\("
    jne not_function
    add r8, 1
    
    push [jmp_string]
    mov r7, 4
    call prin
    pop rax

    function_loop:
    cmpb [r8], "\)"
    je function_loop_done
    movb rax, [r8]
    push rax
    mov r7, 1
    call prin
    add r8, 1
    jmp function_loop

    function_loop_done:
    jmp newline_string_end

    newline_string:
    dq 10
    newline_string_end:

    push [newline_string]
    mov r7, 1
    call prin
    pop rax
    add r8, 1
    jmp main
    
    not_function:
    
    cmpb [r8], "\\"
    jne not_escape
    add r8, 1
    not_escape:
    
    push [r8]
    mov rdi, 1
    call prin
    pop rax
    add r8, 1
    jmp main    

inva:
; invalid
sub r4, 24
mov [r4], "inva"
mov [r4+4], "lid "
mov [r4+8], "inst"
mov [r4+12], "ruct"
mov [r4+16], "ion"
mov [r4+20], 10

mov r7, 21
mov [outf], 0
call prin

add r4, 24

call exit
jmp 0
mov r0, r0
