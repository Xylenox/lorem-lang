; register layout
; ----------------
; r4 = pointer to input
; r9 = output file descriptor
; r10 = characters remaining in input
;
push start
push 0
|make_pair_test|
push rax
jmp make_pair
make_pair_test:
|call_start_with_pair|
pop rcx
push rax
push rcx
jmp runtime_call
call_start_with_pair:
pop rax
ret

constant_strings:
push_string:
dq "push "
jmp_string:
dq "jmp "
newline_string:
dq 10

inpf: dq 0
outf: dq 0
flen: dq 0
iter: dq 0
ofar: dq 0  ; offset array

exit:
    mov r0, 60
    mov r7, 0
    syscall

runtime_call:
    ; first input is closure containing \| number of operands including function, function, environment \|
    mov rdx, [rsp]
    mov rcx, [rdx]
    shl rcx, 3
    add rdx, 8
    add rsp, 8
    sub rsp, rcx

    runtime_call_loop:
    sub rcx, 8
    mov rax, [rdx+rcx]
    mov [rsp+rcx], rax
    cmp rcx, 0
    jne runtime_call_loop
    
    ret     ; fake ret lol

page_pointer:
dq 0
memory_left:
dq 0
malloc:
    push rcx
    push rdx
    push rsi
    push rdi
    push r8
    push r9
    push r10
    push r11

    cmp [memory_left], rdi
    jl new_page
    jmp malloc_ret
    
    new_page:
    push rdi
    mov rsi, 4096
    mov rdi, 0               ; adress
    mov rdx, 3               ; PROT_READ \| PROT_WRITE
    mov r10, 0x22           ; MAP_SHARED \| MAP_ANONYMOUS
    mov r8, -1              ; file descriptor empty, anonymous
    mov r9, 0               ; offset
    mov rax, 9               ; mmap
    syscall
    pop rdi
    mov [page_pointer], rax
    mov [memory_left], 4096

    malloc_ret:
    mov rax, [page_pointer]
    add [page_pointer], rdi
    sub [memory_left], rdi

    pop r11
    pop r10
    pop r9
    pop r8
    pop rdi
    pop rsi
    pop rdx
    pop rcx
    ret

deref_byte: ; takes (cont ptr) and calls cont with *ptr
    mov rax, [rsp+8]
    sub rcx, rcx
    movb rcx, [rax]
    mov [rsp+8], rcx
    jmp runtime_call    

compare: ; takes in (a b equal_cont diff_cont) and calls equal_cont or diff_cont depending on a == b
    pop rax
    pop rcx
    pop rdi
    pop rsi
    cmp rax, rcx
    jne compare_fail
    push rdi
    jmp runtime_call

    compare_fail:
        push rsi
        jmp runtime_call

(make_pair: cont a b -> cont |make_pair_lambda [a] [b]|)
(make_pair_lambda: a b cont -> cont a b)

(make_nil: cont -> cont (make_nil_lambda: cont_nil cont_leaf cont_internal -> cont_nil))
(make_leaf: l r cont -> cont (make_leaf_lambda: cont_nil cont_leaf cont_internal -> cont_leaf l r))
(make_internal: a b cont -> cont (make_internal_lambda: cont_nil cont_leaf cont_internal -> cont_internal a b))

add_func:
    pop rdi
    pop rsi
    pop rax
    add rdi, rsi
    push rdi
    push rax
    jmp runtime_call

make_nil_imperative:
    |make_nil_imperative_done|
    push rax
    jmp make_nil
    make_nil_imperative_done:
    pop rax
    ret
make_leaf_imperative:
    push rsi
    push rdi
    |make_internal_imperative_done|
    pop rdi
    pop rsi
    push rax
    push rsi
    push rdi
    jmp make_leaf
    make_leaf_imperative_done:
    pop rax
    ret
    
make_internal_imperative:
    push rsi
    push rdi
    |make_internal_imperative_done|
    pop rdi
    pop rsi
    push rax
    push rsi
    push rdi
    jmp make_internal
    make_internal_imperative_done:
    pop rax
    ret

prin:                   ; printst
push rax
push rcx
push rdx
push rsi
push rdi
push r11
mov rdx, rdi
mov rdi, [outf]
mov rsi, r4
add rsi, 56
mov rax, 1
syscall
pop r11
pop rdi
pop rsi
pop rdx
pop rcx
pop rax
ret

print_range: ; FOLLOWS SYSTEM V ABI
    ; prints [rdi, rsi) to outf
    mov rdx, rsi        ; length of print
    sub rdx, rdi
    mov rsi, rdi ; rsi already stores buffer lcoation
    mov rdi, [outf]
    mov rax, 1
    syscall
    ret

print_range_function:
    ; takes l r cont and prints l r then calls cont
    pop rdi
    pop rsi
    call print_range
    jmp runtime_call

(print_tree: cont tree -> |traverse_tree| tree |print_range_function| cont)

(traverse_tree: tree action cont -> tree cont |traverse_leaf [action] [cont]| |traverse_internal [action] [cont]|)
(traverse_leaf: action cont l r -> action l r cont)
(traverse_internal: action cont a b -> |traverse_tree| a action |traverse_tree [b] [action] [cont]|)

; calls cont with new_tree
(map_tree: tree action cont -> tree (map_nil: -> |make_nil| cont) (map_leaf: l r -> action l r cont) |map_internal [action] [cont]|)
(map_internal: action cont a b -> |map_tree| a action |map_internal_b [action] [cont] [b]|)
(map_internal_b: action cont b new_a -> |map_tree| b action |map_internal_merge [action] [cont] [new_a]|)
(map_internal_merge: action cont new_a new_b -> |make_internal| new_a new_b cont)

map_tree_imperative:
    sub rsp, 24
    mov [rsp], rdi
    mov [rsp+8], rsi
    |map_tree_imperative_lambda|
    mov [rsp+16], rax
    jmp map_tree
    map_tree_imperative_lambda:
        pop rax
        ret

map_id_imperative:
    sub rsp, 24
    mov [rsp], rdi
    |make_leaf|
    mov [rsp+8], rax
    |map_id_imperative_lambda|
    mov [rsp+16], rax
    jmp map_tree
    map_id_imperative_lambda:
        pop rax
        ret

print_tree_imperative:
    push rdi
    |print_tree_imperative_done|
    push rax
    jmp print_tree
    print_tree_imperative_done:
    ret

print_range_pair:
    push rdi
    |print_range_pair_lambda|
    pop rdi
    push rax
    push rdi
    jmp runtime_call
    print_range_pair_lambda:
        pop rdi
        pop rsi
        call print_range
        ret

make_pair_imperative:
    push rsi
    push rdi
    |make_pair_imperative_lambda|
    push rax
    jmp make_pair
    make_pair_imperative_lambda:
        pop rax
        ret

print_ranges_function:

print_ranges:
    cmp rdi, 0
    jne print_ranges_continue
    ret
    print_ranges_continue:
    push rdi
    |print_ranges_lambda|
    pop rdi
    push rax
    push rdi
    jmp runtime_call
    print_ranges_lambda:
        pop rdi
        call print_range_pair
        pop rdi
        jmp print_ranges

print_range_line:
    call print_range
    call println
    ret

println:
    push 10
    mov rdi, 1
    call prin
    add rsp, 8
    ret

is_alpha:           ; is alpha
    cmp r7, "a"      ; a
    jl nalp
    cmp r7, "z"     ; z
    jg nalp
    yalp:
    mov r0, 1
    ret
    nalp:
    mov r0, 0
    ret

is_digit:           ; is alpha
    cmp r7, "0"
    jl not_digit
    cmp r7, "9"
    jg not_digit
    yes_digit:
    mov r0, 1
    ret
    not_digit:
    mov r0, 0
    ret

parse_comment:
    call peek_character
    cmp rax, 0x3B
    jne done_comment
    coml:
    call peek_character
    cmp rax, 10
    je done_comment
    add r8, 1
    jmp coml
    done_comment:
    ret

peek_character:
    sub rax, rax
    cmp r8, [flen]
    je peek_character_ret
    movb rax, [r8]
    peek_character_ret:
    ret

read_whitespace:
    cmp r8, [flen]
    je done_whitespace
    cmpb [r8], " "
    je not_done_whitespace
    cmpb [r8], 10
    je not_done_whitespace
    done_whitespace:
    ret
    not_done_whitespace:
    add r8, 1
    jmp read_whitespace

read_whitespace_func: ; (r8 flen cont)
    pop r8
    pop [flen]
    call read_whitespace
    pop rax
    push [flen]
    push r8
    push rax
    jmp runtime_call

read_identifier: ; read identifier and return start and end pointers
    ; call read_whitespace
    push r8
    iloo:
    sub rcx, rcx
    movb cl, [r8]
    mov rdi, rcx
    call is_alpha
    cmp rax, 1
    je identifier_loop_continue
    call is_digit
    cmp rax, 1
    je identifier_loop_continue
    cmp rcx, "_"
    je identifier_loop_continue
    jmp idon
    identifier_loop_continue:
    add r8, 1
    jmp iloo
    idon:
    pop rax
    mov rdx, r8
    ret

read_identifier_func: ; (r8 flen cont)
    pop r8
    pop [flen]
    call read_identifier
    pop rcx
    push rdx
    push rax
    push [flen]
    push r8
    push rcx
    jmp runtime_call

read_identifier_list:
    pop r8
    pop [flen]
    call make_nil_imperative
    push rax

    id_list_loop:
    call read_whitespace
    call read_identifier
    cmp rax, rdx
    je id_list_done

    mov rdi, rax
    mov rsi, rdx
    call make_leaf_imperative
    
    pop rdi
    mov rsi, rax
    call make_internal_imperative
    push rax

    jmp id_list_loop

    id_list_done:
    pop rax
    pop rdi
    push [flen]
    push r8
    push rax
    push rdi
    jmp runtime_call

read_identifier_list_imperative:
    push rsi
    push rdi
    |read_identifier_list_imperative_lambda|
    pop rdi
    pop rsi
    push rax
    push rsi
    push rdi
    jmp read_identifier_list
    read_identifier_list_imperative_lambda:
        pop rax
        pop r8
        pop [flen]
        ret

read_operand_list:
    pop r8
    pop [flen]
    call make_nil_imperative
    push rax

    op_list_loop:
    call read_whitespace
    call read_operand
    cmp rax, rdx
    je op_list_done

    mov rdi, rax
    mov rsi, rdx
    call make_leaf_imperative
    
    pop rdi
    mov rsi, rax
    call make_internal_imperative
    push rax

    jmp op_list_loop

    op_list_done:
    pop rax
    pop rdi
    push [flen]
    push r8
    push rax
    push rdi
    jmp runtime_call

read_operand_list_imperative:
    push rsi
    push rdi
    |read_operand_list_imperative_lambda|
    pop rdi
    pop rsi
    push rax
    push rsi
    push rdi
    jmp read_operand_list
    read_operand_list_imperative_lambda:
        pop rax
        pop r8
        pop [flen]
        ret


read_operand:
    cmpb [r8], "\["
    jne read_identifier
    push r8
    memory_operand_loop:
    sub rcx, rcx
    movb cl, [r8]
    mov rdi, rcx
    cmp rcx, "\]"
    je memory_operand_loop_done
    add r8, 1
    jmp memory_operand_loop
    memory_operand_loop_done:
    add r8, 1
    pop rax
    mov rdx, r8
    ret

read_id_or_closure:
    cmpb [r8], "\|"
    jne read_identifier
    push r8
    add r8, 1
    id_or_closure_loop:
    sub rcx, rcx
    movb cl, [r8]
    mov rdi, rcx
    cmp rcx, "\|"
    je id_or_closure_loop_done
    add r8, 1
    jmp id_or_closure_loop
    id_or_closure_loop_done:
    add r8, 1
    pop rax
    mov rdx, r8
    ret

read_id_or_closure_or_function:
    cmpb [r8], "\("
    jne read_id_or_closure
    push r8
    mov rax, 0
    id_or_closure_or_func_loop:
    sub rcx, rcx
    movb cl, [r8]
    mov rdi, rcx
    
    cmp rcx, "\("
    jne not_idocf_open
    add rax, 1
    not_idocf_open:
    cmp rcx, "\)"
    jne not_idocf_close
    sub rax, 1
    not_idocf_close:
    cmp rax, 0
    je id_or_closure_or_func_loop_done
    add r8, 1
    jmp id_or_closure_or_func_loop
    id_or_closure_or_func_loop_done:
    add r8, 1
    pop rax
    mov rdx, r8
    ret

newline_leaf:
    dq 0
closure_tree:
    dq 0

closure_map_arg:
    jmp suff_strings_end
    mov_string:
    dq "mov rcx,"
    dq " "
    mov_string_end:
    suff_strings:
    dq "mov [rdx"
    dq "], rcx"
    dq "add rdx,"
    dq " 8"
    suff_strings_end:
    lea rdi, [mov_string]
    lea rsi, [mov_string+9]
    call print_range
    pop rdi
    pop rsi
    call print_range_line
    lea rdi, [suff_strings]
    lea rsi, [suff_strings+14]
    call print_range_line
    lea rdi, [suff_strings+16]
    lea rsi, [suff_strings+26]
    call print_range_line

    pop rax
    push 0
    push rax
    jmp runtime_call

print_closure:
    push rdi
    lea rdi, [newline_string]
    lea rsi, [newline_string+1]
    call make_leaf_imperative
    mov [newline_leaf], rax
    
    lea rdi, [newline_string]
    lea rsi, [newline_string]
    call make_leaf_imperative
    mov [closure_tree], rax
    
    jmp closure_header_end
    closure_header:
    dq "mov rdi,"
    dq " 800"
    
    dq "call mal"
    dq "loc"
    
    dq "lea rdx,"
    dq " [rax+8]"
    closure_header_end:
    lea rdi, [newline_string]
    lea rsi, [newline_string+1]
    call make_pair_imperative
    mov rdi, rax
    mov rsi, 0
    call make_pair_imperative
    push rax
    lea rdi, [closure_header]
    lea rsi, [closure_header+12]
    call make_pair_imperative
    mov rdi, rax
    pop rsi
    call make_pair_imperative
    mov rdi, rax
    call print_ranges
    lea rdi, [closure_header+16]
    lea rsi, [closure_header+27]
    call make_leaf_imperative
    mov rdi, rax
    call print_tree_imperative
    call println
    lea rdi, [closure_header+32]
    lea rsi, [closure_header+48]
    call print_range_line

    |closure_map_arg|
    mov rsi, rax
    pop rdi
    call map_tree_imperative

    
    lea rdi, [closure_footer]
    lea rsi, [closure_footer+12]
    call print_range_line
    
    lea rdi, [closure_footer+16]
    lea rsi, [closure_footer+26]
    call print_range_line
    
    lea rdi, [closure_footer+32]
    lea rsi, [closure_footer+42]
    call print_range_line
    
    lea rdi, [closure_footer+48]
    lea rsi, [closure_footer+62]
    call print_range_line

    ret

brackets_string:
    dq "[]"
eof_closure_map_arg:
    lea rdi, [mov_string]
    lea rsi, [mov_string+9]
    call print_range
    mov rdi, [rsp]
    cmp rdi, [function_name]
    je is_first_arg_in_closure
    lea rdi, [brackets_string]
    lea rsi, [brackets_string+1]
    call print_range
    mov rdi, [prev_function_name]
    mov rsi, [prev_function_name+8]
    call print_range
    pop rdi
    pop rsi
    call print_range
    lea rdi, [brackets_string+1]
    lea rsi, [brackets_string+2]
    call print_range_line
    jmp isnt_first_arg
    is_first_arg_in_closure:

    pop rdi
    pop rsi
    call print_range_line
    isnt_first_arg:
    lea rdi, [suff_strings]
    lea rsi, [suff_strings+14]
    call print_range_line
    lea rdi, [suff_strings+16]
    lea rsi, [suff_strings+26]
    call print_range_line

    pop rax
    push 0
    push rax
    jmp runtime_call

print_closure_eof:
    push rdi
    lea rdi, [newline_string]
    lea rsi, [newline_string+1]
    call make_leaf_imperative
    mov [newline_leaf], rax
    
    lea rdi, [newline_string]
    lea rsi, [newline_string]
    call make_leaf_imperative
    mov [closure_tree], rax
    
    lea rdi, [newline_string]
    lea rsi, [newline_string+1]
    call make_pair_imperative
    mov rdi, rax
    mov rsi, 0
    call make_pair_imperative
    push rax
    lea rdi, [closure_header]
    lea rsi, [closure_header+12]
    call make_pair_imperative
    mov rdi, rax
    pop rsi
    call make_pair_imperative
    mov rdi, rax
    call print_ranges
    lea rdi, [closure_header+16]
    lea rsi, [closure_header+27]
    call make_leaf_imperative
    mov rdi, rax
    call print_tree_imperative
    call println
    lea rdi, [closure_header+32]
    lea rsi, [closure_header+48]
    call print_range_line

    |eof_closure_map_arg|
    mov rsi, rax
    pop rdi
    call map_tree_imperative

    
    lea rdi, [closure_footer]
    lea rsi, [closure_footer+12]
    call print_range_line
    
    lea rdi, [closure_footer+16]
    lea rsi, [closure_footer+26]
    call print_range_line
    
    lea rdi, [closure_footer+32]
    lea rsi, [closure_footer+42]
    call print_range_line
    
    lea rdi, [closure_footer+48]
    lea rsi, [closure_footer+62]
    call print_range_line

    ret

closure_footer:
    dq "sub rdx,"
    dq " rax"
    dq "shr rdx,"
    dq " 3"
    dq "sub rdx,"
    dq " 1"
    dq "mov [rax"
    dq "], rdx"

parse_closure:
    add r8, 1
    mov rdi, r8
    mov rsi, [flen]
    call read_operand_list_imperative
    add r8, 1
    mov rdi, rax
    call print_closure
    ret
parse_closure_outer:
    mov [function_name], 0
    mov [function_name+8], 0
    mov [prev_function_name], 0
    mov [prev_function_name+8], 0
    call parse_closure
    ret

function_name:
    dq 0
    dq 0


prev_prev_function_name:
    dq 0
    dq 0
prev_function_name:
    dq 0
    dq 0
label_end_string:
    dq ":"
dq_string:
    dq ": dq 0"
pop_start_string:
    dq "pop ["
pop_end_string:
    dq "]"
push_start_string:
    dq "push ["
push_end_string:
    dq "]"
runtime_call_string:
    dq "jmp runt"
    dq "ime_call"
push_rax_string:
    dq "push rax"
print_label:
    call print_range
    lea rdi, [label_end_string]
    lea rsi, [label_end_string+1]
    call print_range_line
    ret
map_argument: ; (l r cont)
    mov rdi, [rsp]
    mov rsi, [rsp+8]
    mov rax, [rsp+16]
    add rsp, 8
    mov [rsp], rax
    call make_leaf_imperative
    push rax
    mov rdi, [prev_function_name]
    mov rsi, [prev_function_name+8]
    call make_leaf_imperative
    mov rdi, rax
    pop rsi
    call make_internal_imperative
    push rax
    lea rdi, [dq_string]
    lea rsi, [dq_string+6]
    call make_leaf_imperative
    pop rdi
    mov rsi, rax
    call make_internal_imperative
    push rax
    lea rdi, [newline_string]
    lea rsi, [newline_string+1]
    call make_leaf_imperative
    pop rdi
    mov rsi, rax
    call make_internal_imperative
    mov [rsp+8], rax
    jmp runtime_call

print_pop_args:
    mov rdi, [rsp]
    mov rsi, [rsp+8]
    mov rax, [rsp+16]
    add rsp, 8
    mov [rsp], rax

    push rdi
    push rsi
    lea rdi, [pop_start_string]
    lea rsi, [pop_start_string+5]
    call print_range
    mov rdi, [prev_function_name]
    mov rsi, [prev_function_name+8]
    call print_range
    pop rsi
    pop rdi
    call print_range
    lea rdi, [pop_end_string]
    lea rsi, [pop_end_string+1]
    call print_range_line
    
    mov [rsp+8], rax
    jmp runtime_call

jmp_end_string:
    dq "jmp "
    dq "_end:"
push_rax_string:
    dq "push rax"
old_arg_list:
    dq 0
new_arg_list:
    dq 0
(parse_function: args l r cont -> |add_func| l 1 |parse_func_cont1 [args] [r] [cont]|)
(parse_func_cont1: args r cont l  -> |read_whitespace_func| l r 
(parse_func_cont2: l r -> |read_identifier_func| l r |parse_func_cont3 [args] [cont]|
))
(parse_func_cont3: args cont l r a b -> |add_func| l 1 |parse_func_cont4 [args] [r] [a] [b] [cont]|)
    parse_func_cont4:
    pop [old_arg_list]
    pop [flen]
    
    mov rdi, [prev_function_name]
    mov [prev_prev_function_name], rdi
    mov rdi, [prev_function_name+8]
    mov [prev_prev_function_name+8], rdi

    mov rdi, [function_name]
    mov [prev_function_name], rdi
    mov rdi, [function_name+8]
    mov [prev_function_name+8], rdi
    pop [function_name]
    pop [function_name+8]
    pop rcx
    pop r8
    push rcx
    push [old_arg_list]
    
    lea rdi, [jmp_end_string]
    lea rsi, [jmp_end_string+4]
    call print_range
    mov rdi, [function_name]
    mov rsi, [function_name+8]
    call print_range    
    lea rdi, [jmp_end_string+8]
    lea rsi, [jmp_end_string+12]
    call print_range_line

    push r8

    mov rdi, r8
    mov rsi, [flen]
    call read_identifier_list_imperative
    mov rdi, [rsp+8]
    mov rsi, rax
    call make_internal_imperative
    push rax    ; args + new_args
    |map_argument|
    mov rsi, rax
    mov rdi, [rsp]
    call map_tree_imperative
    mov rdi, rax
    call print_tree_imperative

    mov rdi, [function_name]
    mov rsi, [function_name+8]
    call print_label

    
    |print_pop_args|
    mov rsi, rax
    mov rdi, [rsp]
    call map_tree_imperative

    call read_whitespace

    pop rax
    pop r8
    push rax
    
    function_arg_loop_2:
    call read_whitespace
    cmpb [r8], "-"
    je function_arg_loop_done_2
    call read_identifier
    jmp function_arg_loop_2
    function_arg_loop_done_2:
    add r8, 2

    mov rax, [argument_buffer_begin]
    mov [argument_buffer_end], rax
    function_body_loop:
    call read_whitespace
    cmpb [r8], "\)"
    je function_body_loop_end

    call read_id_or_closure_or_function
    mov rcx, [argument_buffer_end]
    mov [rcx], rax
    mov [rcx+8], rdx
    add [argument_buffer_end], 16
    jmp function_body_loop
    function_body_loop_end:
    add r8, 1
    function_body_reverse_loop:
    sub [argument_buffer_end], 16
    mov rcx, [argument_buffer_end]
    mov rdi, [rcx]
    cmpb [rdi], "\|"
    jne not_body_closure

    push r8
    mov r8, rdi
    call parse_closure
    pop r8

    lea rdi, [push_rax_string]
    lea rsi, [push_rax_string+8]
    call print_range_line
    jmp end_process_function_body

    not_body_closure:

    cmpb [rdi], "\("
    jne not_body_function
    mov rax, [rsp]
    mov [new_arg_list], rax
    |body_function_cont [argument_buffer_begin] [argument_buffer_end] r8 [flen] [function_name] [function_name+8] [prev_function_name] [prev_function_name+8] [prev_prev_function_name] [prev_prev_function_name+8]|
    push rax
    mov rcx, [argument_buffer_end]
    push [rcx+8]
    push [rcx]
    add rcx, 16
    mov [argument_buffer_begin], rcx
    mov [argument_buffer_end], rcx

    push [new_arg_list]
    jmp parse_function

    body_function_cont:
    pop [argument_buffer_begin]
    pop [argument_buffer_end]
    pop r8
    pop [flen]
    pop [function_name]
    pop [function_name+8]
    pop [prev_function_name]
    pop [prev_function_name+8]
    pop [prev_prev_function_name]
    pop [prev_prev_function_name+8]
    add rsp, 16
    lea rdi, [push_rax_string]
    lea rsi, [push_rax_string+8]
    call print_range_line
    jmp end_process_function_body
    not_body_function:
    mov rcx, [argument_buffer_end]
    mov rdi, [rcx]
    movb dil, [rdi]
    and rdi, 0xFF
    call is_alpha
    cmp rax, 1
    je body_identifier
    
    body_constant:
    lea rdi, [push_start_string]
    lea rsi, [push_start_string+5]
    call print_range
    mov rcx, [argument_buffer_end]
    mov rdi, [rcx]
    mov rsi, [rcx+8]
    call print_range_line
    jmp end_process_function_body
    
    body_identifier:
    lea rdi, [push_start_string]
    lea rsi, [push_start_string+6]
    call print_range
    mov rdi, [prev_function_name]
    mov rsi, [prev_function_name+8]
    call print_range
    mov rcx, [argument_buffer_end]
    mov rdi, [rcx]
    mov rsi, [rcx+8]
    call print_range
    lea rdi, [push_end_string]
    lea rsi, [push_end_string+1]
    call print_range_line
    end_process_function_body:
    mov rcx, [argument_buffer_end]
    cmp rcx, [argument_buffer_begin]
    jne function_body_reverse_loop
    function_done:
    
    lea rdi, [runtime_call_string]
    lea rsi, [runtime_call_string+16]
    call print_range_line
    
    mov rdi, [function_name]
    mov rsi, [function_name+8]
    call print_range
    lea rdi, [jmp_end_string+8]
    lea rsi, [jmp_end_string+13]
    call print_range_line

    mov rdi, [function_name]
    mov rsi, [function_name+8]
    call make_leaf_imperative
    mov rdi, rax

    pop rax ; combined list
    pop rsi ; old list
    call make_internal_imperative
    
    mov rdi, [prev_prev_function_name]
    mov [prev_function_name], rdi
    mov rdi, [prev_prev_function_name+8]
    mov [prev_function_name+8], rdi
    mov rdi, rax
    call print_closure_eof
    
    pop rcx
    push [flen]
    push r8
    push rcx
    jmp runtime_call

parse_function_help:
    mov [function_name], 0
    mov [function_name+8], 0
    |main_loop|
    pop rdi
    pop rsi
    pop rdx
    push rax
    push rdx
    push rsi
    push rdi
    jmp parse_function


parse_closure_function: ; takes (lo hi)
    pop r8
    pop [flen]
    call parse_closure
    push [flen]
    push r8
    jmp main_loop


parse_closure_outer_function: ; takes (lo hi)
    pop r8
    pop [flen]
    call parse_closure
    push [flen]
    push r8
    jmp main_loop

parse_comment_function: ; takes (lo hi)
    pop r8
    pop [flen]
    call parse_comment
    push [flen]
    push r8
    jmp main_loop

parse_escape_function: ; takes (lo hi)
    pop r8
    pop [flen]
    lea rdi, [r8+1]
    lea rsi, [r8+2]
    call print_range
    add r8, 2
    push [flen]
    push r8
    jmp main_loop

argument_buffer_begin:
dq 0
argument_buffer_end:
dq 0

empty_tree:
dq 0
start:
call make_nil_imperative
mov [empty_tree], rax
; open input
mov r6, 0x0             ; READ_ONLY
mov r2, 0xFFFF          ; all perms
mov r7, [rsp+16]            ; argv[1]
mov r0, 2
syscall
mov r8, r0              ; save input file descriptor
; open output
mov r0, 2               ; fopen
mov r6, 0x242           ; truncate/create/READ_WRITE
mov r2, 0xFFFF          ; all perms
mov r7, [rsp+24]            ; argv[2]
syscall
mov [outf], r0
; get input size
sub rsp, 0xC0            ; fstat size
mov r7, r8              ; input file descriptor
mov r6, rsp              ; fstat buffer
mov r0, 5               ; fstat
syscall
mov r10, [rsp+48]            ; file size
mov [flen], r10

; mmap input
mov r0, 9               ; mmap
mov r7, 0               ; address
mov r6, [flen]              ; length
mov r2, 3               ; PROT_READ \| PROT_WRITE
mov r10, 2              ; MAP_PRIVATE
mov r9, 0               ; offset
syscall

mov r8, r0              ; save mmap address

; make heap
mov r7, 0               ; adress
mov r6, [flen]             ; length
shl r6, 8               ; 64 * file size, should be good

mov r2, 3               ; PROT_READ \| PROT_WRITE
mov r10, 0x22           ; MAP_SHARED \| MAP_ANONYMOUS
push r8                 ; save r8
mov r8, -1              ; file descriptor empty, anonymous
mov r9, 0               ; offset
mov r0, 9               ; mmap
syscall
pop r8                  ; restore r8
mov r14, r0             ; save instruction location array end
mov [argument_buffer_begin], rax
mov [argument_buffer_end], rax
mov r15, [flen]            ; store max length of instruction location array
shl r15, 4              ; 16 * file size

mov [iter], 2
push r14
push r8

add [flen], r8

push [flen]
push r8
jmp main_loop
(main_loop: lo hi -> |compare| lo hi |exit| (parse_token:-> |deref_byte| |check_function [lo] [hi]| lo))

(check_function: lo hi c -> |compare| c 40 |parse_function_help [empty_tree] [lo] [hi]| |check_closure [lo] [hi] [c]|)
(check_closure: lo hi c -> |compare| c 124 |parse_closure_outer_function [lo] [hi]| |check_comment [lo] [hi] [c]|)
(check_comment: lo hi c -> |compare| c 59 |parse_comment_function [lo] [hi]| |check_escape [lo] [hi] [c]|)
(check_escape: lo hi c -> |compare| c 92 |parse_escape_function [lo] [hi]| |main_body [lo] [hi]|)
    ; main loop
main_body:
    pop r8
    pop [flen]

    
    push [r8]
    mov rdi, 1
    call prin
    pop rax
    add r8, 1
    jmp main_body_done

    main_body_done:
    push [flen]
    push r8
    jmp main_loop

inva:
; invalid
sub r4, 24
mov [r4], "inva"
mov [r4+4], "lid "
mov [r4+8], "inst"
mov [r4+12], "ruct"
mov [r4+16], "ion"
mov [r4+20], 10

mov r7, 21
mov [outf], 0
call prin

add r4, 24

call exit
mov r0, r0
